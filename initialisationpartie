#include "header.h"

//a jouter en parametre : int tabPerso Dispo[NB_PERSO_DISPO]


void choixPerso(BITMAP*buffer, t_joueur *joueur, int numeroDuJoueur, int messageErreur)
{

// BITMAP servant de buffer d'affichage (double buffer)
    //BITMAP *buffer;
    int quitter =0;
    int eviteRebondSouris = (mouse_b & 1 ? 1 : 0);

    // initialisation d'entree.
    BITMAP *imchoix;

    BITMAP *imnain;
    imnain=load_bitmap("imnain.bmp",NULL);

    BITMAP *imorc;
    imorc=load_bitmap("imorc.bmp",NULL);

    BITMAP *imsorcier;
    imsorcier=load_bitmap("imsorcier.bmp",NULL);

    BITMAP *imelfe;
    imelfe=load_bitmap("imelfe.bmp",NULL);

    BITMAP*nain;
    nain=load_bitmap("nain.bmp",NULL);
    BITMAP*elfe;
    elfe=load_bitmap("elfe.bmp",NULL);
    BITMAP*hobbit;
    hobbit=load_bitmap("hobbit.bmp",NULL);
    BITMAP*sorcier;
    sorcier=load_bitmap("sorcier.bmp",NULL);



    //téléchargement des polices
    FONT *police = NULL; /// Initialisation Polices
    police = load_font("police.pcx",NULL,NULL);
    if(!police)
        allegro_message("Erreur chargement police");


    // CREATION DU BUFFER D'AFFICHAGE à la taille de l'écran
    /*buffer = create_bitmap(SCREEN_W, SCREEN_H);
    if (buffer == NULL) // on verifie que l'image a bien été chargée au cas où.
    {
        allegro_message("pb creation buffer...");
        allegro_exit();
        exit(EXIT_FAILURE);
    }*/
    clear_bitmap(buffer);

    // création du double buffer.
    imchoix = create_bitmap(SCREEN_W, SCREEN_H);

    // décalaration et initialisation de l'image.
    imchoix=load_bitmap("choixjoueur.bmp",NULL);

    // on verifie que l'image a bien été chargée au cas où.
    if (!imchoix)
    {
        allegro_message("pas pu imjoueur.bmp");
        allegro_exit();
        exit(EXIT_FAILURE);
    }
    do
    {

        blit(imchoix, buffer, 0, 0,(SCREEN_W-imchoix->w)/2, (SCREEN_H-imchoix->h)/2, imchoix->w, imchoix->h);
        if(messageErreur==1)
            textout_ex(buffer, police, "PERSONNAGE DEJA SELECTIONNE",290, 440, makecol(255,0,0), -1);
        // afficher coordonnées de la souris (%4d = format numérique largeur fixe sur 4 caractères)
        textprintf_ex(screen,font,60,300,makecol(255,255,255),makecol(0,0,0),"%4d %4d",mouse_x,mouse_y);

        if(numeroDuJoueur==0)
            textout_ex(buffer, police, "CHOISIS TON PERSONNAGE JOUEUR 1",240, 70, makecol(255,255,255), -1);
        else if(numeroDuJoueur==1)
            textout_ex(buffer, police, "CHOISIS TON PERSONNAGE JOUEUR 2",240, 70, makecol(255,255,255), -1);
        else if(numeroDuJoueur==2)
            textout_ex(buffer, police, "CHOISIS TON PERSONNAGE JOUEUR 3",240, 70, makecol(255,255,255), -1);
        else if(numeroDuJoueur==3)
            textout_ex(buffer, police, "CHOISIS TON PERSONNAGE JOUEUR 4",240, 70, makecol(255,255,255), -1);

        //faire une boucle tant que tout les joueurs n'ont pas selectionner leur personnage on continue
        //une fois que tous les joueurs on selectionne leur perso on detemrine l'ordre des joueurs, on affiche cet ordre

        ///NAIN
        //masked_stretch_blit(imchoix,imnain, 0, 0, nain->w, nain->h, 40, 185, 200, 200);
        draw_sprite(buffer,imnain,45,195);
        textout_ex(buffer, police, "NAIN",90, 155, makecol(255, 255, 255), -1);
        if (mouse_x>=65 && mouse_x <=235 && mouse_y >= 207 && mouse_y <= 365)
        {
            draw_sprite(buffer,nain,20,400);
        }
        rect(buffer,30,520,200,560,makecol(255,255,255));
        textout_ex(buffer, police, "JE VALIDE",40, 530, makecol(255,255,255), -1);
        if (mouse_x>=30 && mouse_x <=200 && mouse_y >= 520 && mouse_y <= 560)
            {
                textout_ex(buffer, police, "JE VALIDE",40, 530, makecol(0, 147, 0), -1);
                if(mouse_b & 1 && eviteRebondSouris==0){
                    eviteRebondSouris=1;
                    joueur->numero_perso = NAIN;
                    quitter=1;
                }
            }

        ///ORQUE
        draw_sprite(buffer,imorc,275,190);
        textout_ex(buffer, police, "ORQUE",330, 155, makecol(255, 255, 255), -1);
        if (mouse_x>=310 && mouse_x <=445 && mouse_y >= 207 && mouse_y <= 365)
        {
            draw_sprite(buffer,hobbit,260,400);
        }
        rect(buffer,280,520,460,560,makecol(255,255,255));
        textout_ex(buffer, police, "JE VALIDE",290, 530, makecol(255,255,255), -1);
        if (mouse_x>=280 && mouse_x <=460 && mouse_y >= 520 && mouse_y <= 560)
        {
            textout_ex(buffer, police, "JE VALIDE",290, 530, makecol(0, 147, 0), -1);
            if(mouse_b & 1 && eviteRebondSouris==0){
                    eviteRebondSouris=1;
                    joueur->numero_perso = ORQUE;
                    quitter=1;
                }
        }


        ///ELFE
        draw_sprite(buffer,imelfe,500,185);
        textout_ex(buffer, police, "ELFE",555, 155, makecol(255, 255, 255), -1);
        if (mouse_x>=535 && mouse_x <=675 && mouse_y >= 207 && mouse_y <= 365)
        {
            draw_sprite(buffer,elfe,500,400);
        }
        rect(buffer,530,520,710,560,makecol(255,255,255));
        textout_ex(buffer, police, "JE VALIDE",540, 530, makecol(255,255,255), -1);
        if (mouse_x>=530 && mouse_x <=710 && mouse_y >= 520 && mouse_y <= 560)
        {
            textout_ex(buffer, police, "JE VALIDE",540, 530, makecol(0, 147, 0), -1);
            if(mouse_b & 1 && eviteRebondSouris==0){
                    eviteRebondSouris=1;
                    joueur->numero_perso = ELFE;
                    quitter=1;
            }
        }

        ///SORCIER
        draw_sprite(buffer,imsorcier,730,195);
        textout_ex(buffer, police, "SORCIER",780, 155, makecol(255, 255, 255), -1);
        if (mouse_x>=755 && mouse_x <=906 && mouse_y >= 207 && mouse_y <= 365)
        {
            draw_sprite(buffer,sorcier,740,400);
        }
        rect(buffer,760,520,940,560,makecol(255,255,255));
        textout_ex(buffer, police, "JE VALIDE",770, 530, makecol(255,255,255), -1);
        if (mouse_x>=760 && mouse_x <=940 && mouse_y >= 520 && mouse_y <= 560)
        {
            textout_ex(buffer, police, "JE VALIDE",770, 530, makecol(0, 147, 0), -1);
            if(mouse_b & 1 && eviteRebondSouris==0){
                    eviteRebondSouris=1;
                    joueur->numero_perso = SORCIER;
                    quitter=1;
            }
        }
        blit(buffer, screen, 0, 0, 0, 0, SCREEN_W, SCREEN_H);
        if(!(mouse_b & 1))
            eviteRebondSouris = 0;
    }while(quitter!=1);

    destroy_bitmap(imnain);
    destroy_bitmap(imorc);
    destroy_bitmap(imsorcier);
    destroy_bitmap(imchoix);
    destroy_bitmap(imelfe);
    destroy_bitmap(nain);
    destroy_bitmap(sorcier);
    destroy_bitmap(elfe);
    destroy_bitmap(hobbit);

}
char saisiepseudo(BITMAP*buffer, t_joueur *joueur, int numeroDuJoueur)
{


    // BITMAP servant de buffer d'affichage (double buffer)
    //BITMAP *buffer;

    // initialisation d'entree.
    BITMAP *impseudo;

    //téléchargement des polices
    FONT *police = NULL; /// Initialisation Polices
    police = load_font("police.pcx",NULL,NULL);
    if(!police)
        allegro_message("Erreur chargement police");

    // CREATION DU BUFFER D'AFFICHAGE à la taille de l'écran
    //buffer = create_bitmap(SCREEN_W, SCREEN_H);
    //if (buffer == NULL) // on verifie que l'image a bien été chargée au cas où.
    // {
    //  allegro_message("pb creation buffer...");
    //  allegro_exit();
    // exit(EXIT_FAILURE);
    //}
    clear_bitmap(buffer);

    // création du double buffer.
    impseudo = create_bitmap(SCREEN_W, SCREEN_H);

    // décalaration et initialisation de l'image.
    impseudo =load_bitmap("pseudo.bmp",NULL);

    // on verifie que l'image a bien été chargée au cas où.
    if (!impseudo)
    {
        allegro_message("pas pu pseudo.bmp");
        allegro_exit();
        exit(EXIT_FAILURE);
    }

    int touche, touche1, touche2;

    int i=0;
    char masaisie[SAISIE_MAX+1]; // stockage de la totalité de la saisie
    char dernsaisie[2];    // stockage la derniere touche saisie

    masaisie[SAISIE_MAX]=0;
    dernsaisie[1]=0;
    clear_keybuf();

    clear_bitmap(buffer);
    blit(impseudo, buffer, 0, 0,(SCREEN_W-impseudo->w)/2, (SCREEN_H-impseudo->h)/2, impseudo->w, impseudo->h);

    if(numeroDuJoueur==0)
        textout_ex(buffer, police, "ENTRE TON PSEUDO JOUEUR 1",300, 100, makecol(255,255,255), -1);
    else if(numeroDuJoueur==1)
        textout_ex(buffer, police, "ENTRE TON PSEUDO JOUEUR 2",300, 100, makecol(255,255,255), -1);
    else if(numeroDuJoueur==2)
        textout_ex(buffer, police, "ENTRE TON PSEUDO JOUEUR 3",300, 100, makecol(255,255,255), -1);
    else if(numeroDuJoueur==3)
        textout_ex(buffer, police, "ENTRE TON PSEUDO JOUEUR 4",300, 100, makecol(255,255,255), -1);



    // textout_ex(buffer, police, "ENTRE TON PSEUDO",350, 100, makecol(255,255,255), -1);
    textout_ex(buffer, police, "_",350+20*(i+1),300, makecol(255, 255, 255), -1);
    //textprintf(buffer,police,350+8*(i+1),300,makecol(255,255,255),"_");

    while(!key[KEY_ENTER] && !key[KEY_ENTER_PAD])
    {





        blit(buffer, screen, 0, 0, 0, 0, SCREEN_W, SCREEN_H);


        touche=readkey();
        touche1=touche & 0xFF; // code ASCII
        touche2=touche >> 8;   // scancode
        // affiche code numerique de la touche saisie...
        textout_ex(buffer, police, "                                            ",350, 300,makecol(255, 255, 255), -1);
        //textprintf(buffer,font,350,300,makecol(255,255,255),"                                    ");

        if (( touche1>31 && touche1<58) || ( touche1>64 && touche1<123))
        {
            if (i>=SAISIE_MAX)
                i=SAISIE_MAX;
            else
            {
                masaisie[i]=touche1;
                dernsaisie[0]=touche1;
                masaisie[i+1]=0;
                /*  on affiche la touche saisie */
                //textprintf(buffer,font,350+8*i,300,makecol(255,255,255),"%s",dernsaisie);

                textprintf(buffer,police,350+20*i,300,makecol(255,255,255)-1,"%s",dernsaisie);
                i++;
                textprintf(buffer,police,350+20*i,300,makecol(255,255,255)-1,"_");
                /* textprintf(buffer,police,10+8*i,30,makecol(255,255,255),"%s",dernsaisie);
                 i++;
                 textprintf(buffer,police,10+8*i,30,makecol(255,255,255),"_");*/
            }
        }
        //* si effacement
        if ( touche2==KEY_BACKSPACE )
        {
            i--;
            if ( i<0 )
                i=0;
            textprintf(buffer,police,350+20*i,300,makecol(255,255,255),"_");
            textprintf(buffer,police,350+20*(i+1),300,makecol(255,255,255)," ");
        }

        //* si validation
        if ( (touche2==KEY_ENTER_PAD) || (touche2==KEY_ENTER) )
        {
            textprintf(buffer,police,350+20*i,300,makecol(255,255,255)," ");
            if (i==0)
                masaisie[0]=32; // space
            masaisie[i+1]=0;
        }
    }
    textprintf(screen,font,350,450,makecol(255,255,255),"votre saisie est : %s", masaisie);

    textprintf(screen,font,350,470,makecol(255,255,255),"Appuyer sur une touche pour continuer");



    readkey();

    clear_keybuf();

    destroy_bitmap(impseudo);




    //blit(buffer, screen, 0, 0, 0, 0, SCREEN_W, SCREEN_H);
    return masaisie;

}

/*
void choixPseudo(BITMAP* buffer, t_joueur* joueur)
{
    //Déclarations des variables
    int quitter=0;
    int fin=0;
    //int touche;
    //int taille_restante=0;
    //char carac;
    char pseudo_tmp[20];

    strcpy(pseudo_tmp, "\0");

    // initialisation d'entree.
    BITMAP *imchoix;
    // Image choix en tant que bitmap à la taille de l'écran
    imchoix = create_bitmap(SCREEN_W, SCREEN_H);
    // décalaration et initialisation de l'image.
    imchoix=load_bitmap("choixjoueur.bmp",NULL);
    // Vérification
    if (!imchoix)
    {
        allegro_message("pas pu imjoueur.bmp");
        allegro_exit();
        exit(EXIT_FAILURE);
    }

    //téléchargement des polices
    FONT *police = NULL; /// Initialisation Polices
    police = load_font("police.pcx",NULL,NULL);
    if(!police)
    {
        allegro_message("Erreur chargement police");
    }

    rest(100); //Attendre pour ne pas prendre le click de souris de la page d'avant
    clear_bitmap(buffer); //Nettoyage buffer

    do{
        blit(imchoix, buffer, 0, 0, 0, 0, imchoix->w, imchoix->h);

        // afficher coordonnées de la souris (%4d = format numérique largeur fixe sur 4 caractères)
        textprintf_ex(screen,font,60,300,makecol(255,255,255),makecol(0,0,0),"%4d %4d",mouse_x,mouse_y);

        //Phrase principale
        textout_ex(buffer, police, "CHOISIS TON PSEUDO",(SCREEN_W-294)/2, 70, makecol(255,255,255), -1);

        //Rectangle d'écriture
        rect(buffer,(SCREEN_W-690)/2, 275,((SCREEN_W-690)/2)+690, 315, makecol(255,255,255));
        textout_ex(buffer, police, pseudo_tmp, ((SCREEN_W-690)/2)+10, 285, makecol(255, 255, 255), -1);

        //Rectangle bouton "valider"
        rect(buffer,(SCREEN_W-170)/2,420,((SCREEN_W-170)/2)+170,460,makecol(255,255,255));
        //Texte "valider"
        textout_ex(buffer, police, "VALIDER",(SCREEN_W-120)/2, 430, makecol(255,255,255), -1);
        if (mouse_x>=395 && mouse_x <=565 && mouse_y >= 420 && mouse_y <= 460)
        {
            textout_ex(buffer, police, "VALIDER",(SCREEN_W-120)/2, 430, makecol(0, 147, 0), -1);
        }
        if (mouse_b & 1 && mouse_x>=395 && mouse_x <=565 && mouse_y >= 420 && mouse_y <= 460 && (strlen(*joueur->prenom)>=1))
        {
            quitter =1;
        }

        //rest(1000);
      /*  do{
            gets(*joueur->prenom);
            fin=1;
        }while(fin!=1);

        // afficher le pseudo en train d'être saisi
        //textout_ex(buffer, police, pseudo_tmp, ((SCREEN_W-690)/2)+10, 285, makecol(255, 255, 255), -1);


        // keypressed() : équivalent allegro du kbhit()
        if (keypressed() && fin==0)
        {
            gets(*joueur->prenom);
            fin=1;

            // récupérer la touche avec readkey() : équivalent allegro du getch()
            touche=readkey();

            // a partir de l'info de touche on obtient le caractère en castant en char
            carac=(char)touche;

            //On ajoute le nouveau caractère au pseudo
            //taille_restante=19-strlen(pseudo_tmp); //On regarde la place qu'il reste pour ne pas dépasser
            //strncat(pseudo_tmp, carac, taille_restante);
            strcat(pseudo_tmp, carac);



            //Si on veut effacer
            /*if(key[KEY_BACKSPACE])
            {
                strcpy(pseudo_tmp, "");
            }

        }

        //Affichage du buffer sur l'écran
        blit(buffer, screen, 0, 0, 0, 0, SCREEN_W, SCREEN_H);

    }while(quitter!=1);
    //strcpy(joueur->prenom, pseudo_tmp);
    textout_ex(buffer, police, *joueur->prenom, ((SCREEN_W-690)/2)+10, 285, makecol(255, 255, 255), -1);
    rest(3000);
}
*/



void initialisationJoueur(BITMAP* buffer, t_joueur* joueur, int numeroDuJoueur, int messageErreur)
{
    //char ident[100];

    ///donnes perso
    joueur->PV_perso = PV_NOUVEAU_PERSO;
    joueur->PA_perso = PA_NOUVEAU_PERSO;
    joueur->PM_perso = PM_NOUVEAU_PERSO;
    joueur->nb_tours_survecu=0;

    //joueur->numero_perso=choixPerso(buffer,joueur); //appelle sous prog selection perso
    choixPerso(buffer, joueur, numeroDuJoueur, messageErreur);
    printf("%d", joueur->numero_perso);

    switch(joueur->numero_perso)
    {
    case NAIN:
        ///premiere attaque :
        strcpy(joueur->attaques.attaque_1.attaque,"belier");
        joueur->attaques.attaque_1.attaque_pv=15;
        joueur->attaques.attaque_1.attaque_pa=5;
        ///deuxieme :
        strcpy(joueur->attaques.attaque_1.attaque,"epee");
        joueur->attaques.attaque_1.attaque_pv=10;
        joueur->attaques.attaque_1.attaque_pa=15;
        ///troisième:
        strcpy(joueur->attaques.attaque_1.attaque,"hache");
        joueur->attaques.attaque_1.attaque_pv=10;
        joueur->attaques.attaque_1.attaque_pa=20;
        ///quatrième:
        strcpy(joueur->attaques.attaque_1.attaque,"javelot");
        joueur->attaques.attaque_1.attaque_pv=15;
        joueur->attaques.attaque_1.attaque_pa=5;
        ///cinquieme :
        strcpy(joueur->attaques.attaque_1.attaque,"massue");
        joueur->attaques.attaque_1.attaque_pv=15;
        joueur->attaques.attaque_1.attaque_pa=15;


        joueur->numero_perso=NAIN;
        strcpy(joueur->nomperso,"nain");
        ///joueur->numero_case= ?????????
        joueur->coord_x= 10;
        joueur->coord_y= 10;
        break;

    case SORCIER:
        ///premiere attaque :
        strcpy(joueur->attaques.attaque_1.attaque,"boulefeu");
        joueur->attaques.attaque_1.attaque_pv=15;
        joueur->attaques.attaque_1.attaque_pa=5;
        ///deuxieme :
        strcpy(joueur->attaques.attaque_1.attaque,"baton");
        joueur->attaques.attaque_1.attaque_pv=10;
        joueur->attaques.attaque_1.attaque_pa=10;
        ///troisième:
        strcpy(joueur->attaques.attaque_1.attaque,"poignard");
        joueur->attaques.attaque_1.attaque_pv=10;
        joueur->attaques.attaque_1.attaque_pa=10;
        ///quatrième:
        strcpy(joueur->attaques.attaque_1.attaque,"barrage");
        joueur->attaques.attaque_1.attaque_pv=10;
        joueur->attaques.attaque_1.attaque_pa=5;
        ///cinquieme :
        strcpy(joueur->attaques.attaque_1.attaque,"dormor");
        joueur->attaques.attaque_1.attaque_pv=15;
        joueur->attaques.attaque_1.attaque_pa=10;


        joueur->numero_perso=SORCIER;
        strcpy(joueur->nomperso,"sorcier");
        ///joueur->numero_case= ?????????


        break;
    case ELFE:
        ///premiere attaque :
        strcpy(joueur->attaques.attaque_1.attaque,"anneau");
        joueur->attaques.attaque_1.attaque_pv=15;
        joueur->attaques.attaque_1.attaque_pa=5;
        ///deuxieme :
        strcpy(joueur->attaques.attaque_1.attaque,"arc");
        joueur->attaques.attaque_1.attaque_pv=10;
        joueur->attaques.attaque_1.attaque_pa=20;
        ///troisième:
        strcpy(joueur->attaques.attaque_1.attaque,"epee");
        joueur->attaques.attaque_1.attaque_pv=5;
        joueur->attaques.attaque_1.attaque_pa=20;
        ///quatrième:
        strcpy(joueur->attaques.attaque_1.attaque,"epeeelfique");
        joueur->attaques.attaque_1.attaque_pv=15;
        joueur->attaques.attaque_1.attaque_pa=5;
        ///cinquieme :
        strcpy(joueur->attaques.attaque_1.attaque,"lame");
        joueur->attaques.attaque_1.attaque_pv=10;
        joueur->attaques.attaque_1.attaque_pa=15;


        joueur->numero_perso=ELFE;
        strcpy(joueur->nomperso,"elfe");
        ///joueur->numero_case= ?????????
        break;
    case ORQUE:
        ///premiere attaque :
        strcpy(joueur->attaques.attaque_1.attaque,"coup");
        joueur->attaques.attaque_1.attaque_pv=15;
        joueur->attaques.attaque_1.attaque_pa=5;
        ///deuxieme :
        strcpy(joueur->attaques.attaque_1.attaque,"dague");
        joueur->attaques.attaque_1.attaque_pv=15;
        joueur->attaques.attaque_1.attaque_pa=10;
        ///troisième:
        strcpy(joueur->attaques.attaque_1.attaque,"epeearwen");
        joueur->attaques.attaque_1.attaque_pv=10;
        joueur->attaques.attaque_1.attaque_pa=20;
        ///quatrième:
        strcpy(joueur->attaques.attaque_1.attaque,"epeethorin");
        joueur->attaques.attaque_1.attaque_pv=15;
        joueur->attaques.attaque_1.attaque_pa=5;
        ///cinquieme :
        strcpy(joueur->attaques.attaque_1.attaque,"lame");
        joueur->attaques.attaque_1.attaque_pv=10;
        joueur->attaques.attaque_1.attaque_pa=15;


        joueur->numero_perso=ORQUE;
        strcpy(joueur->nomperso,"orque");
        ///joueur->numero_case= ?????????

        break;
    default:
        break;
         joueur->pseudo = saisiepseudo(buffer,joueur,numeroDuJoueur);
    }





    //ss prog saisi de l'ident
    //joueur->prenom = (char *) malloc(sizeof(char) * strlen(mot));
    //strcpy(joueur->prenom, buffer);

}

void initialisationDesJoueurs(t_jeuDofus *jeuDofus)
{

    BITMAP *buffer;
    int i = 0, messageErreur=0;
    //init dofus
    jeuDofus->nbJoueurs = 0;
    jeuDofus->tabJoueur = NULL;

    // CREATION DU BUFFER D'AFFICHAGE à la taille de l'écran
    buffer = create_bitmap(SCREEN_W, SCREEN_H);

    if (buffer == NULL) // on verifie que l'image a bien été chargée au cas où.
    {
        allegro_message("pb creation buffer...");
        allegro_exit();
        exit(EXIT_FAILURE);
    }
    clear_bitmap(buffer);

    //int tabPersoDispo[NB_PERSO_DISPO] = {NAIN, ELFE, ORQUE, SORCIER};

    ///affichage choix nb joueurs
    jeuDofus->nbJoueurs = affichage_nouvelle_partie(buffer);
    printf("\nNb joueur : %d\n", jeuDofus->nbJoueurs);

    //allocation dynamique et vérification
    jeuDofus->tabJoueur = (t_joueur*)malloc(sizeof(t_joueur)*(jeuDofus->nbJoueurs));
    if(jeuDofus->tabJoueur == NULL)
        printf("Erreur dans l'allocation dynamique du tableau de joueur\n");

    //remplissage du tableau de structure joueur alloué dyn
    for(i=0 ; i < jeuDofus->nbJoueurs; i++)
    {
        initialisationJoueur(buffer, &(jeuDofus->tabJoueur[i]),i, messageErreur); //envoyer tabPersoDispo en parametre
        if(jeuDofus->tabJoueur[i].numero_perso==NAIN)
            printf("DEBUG : JOUEUR %d PERSO SELEC NAIN \n",i+1);
        if(jeuDofus->tabJoueur[i].numero_perso==SORCIER)
            printf("DEBUG : JOUEUR %d PERSO SELEC SORCIER \n",i+1);
        if(jeuDofus->tabJoueur[i].numero_perso==ORQUE)
            printf("DEBUG : JOUEUR %d PERSO SELEC ORQUE \n",i+1);
        if(jeuDofus->tabJoueur[i].numero_perso==ELFE)
            printf("DEBUG : JOUEUR %d PERSO SELEC ELFE \n",i+1);
        for(int j=0; j < i; j++){
            if(jeuDofus->tabJoueur[i].numero_perso == jeuDofus->tabJoueur[j].numero_perso){
                printf("Personnage deja selectionner veillez rechoisir ! \n");
                j=i;
                i--;
                messageErreur=1;
            }else messageErreur=0;
        }

    }


}



void initialisationNouvellePartie(t_jeuDofus *jeuDofus)
{
    //initialisationMap();
    printf("initialisation \n");
    initialisationDesJoueurs(jeuDofus);
}

void nouvellePartie(t_jeuDofus *jeuDofus)
{
    printf("Nouvelle partie ! ");
    initialisationNouvellePartie(jeuDofus);

    boucleDeJeu(jeuDofus);
}
