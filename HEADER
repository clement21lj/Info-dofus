////////////////////
///BIBLIOTHEQUES///
//////////////////
#ifndef HEADER_H_INCLUDED
#define HEADER_H_INCLUDED
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <allegro.h>



///gestion des joueurs :
#define  PV_NOUVEAU_PERSO 100
#define  PA_NOUVEAU_PERSO 100
#define  PM_NOUVEAU_PERSO 100

#define NAIN        1
#define SORCIER     2
#define ELFE        3
#define ORQUE       4
#define SAISIE_MAX   10

#define nbperso  4


#define NB_LIGNES 19
#define NB_COLONNES 27



/////////////////
///STRUCTURES///
///////////////

enum typeCase{
    CHEMIN
    ,INACCESSIBLE
    ,SPAWN_ORQUE
    ,SPAWN_SORCIER
    ,SPAWN_NAIN
    ,SPAWN_ELFE
    ,JOUEUR_SUR_CASE
};

//Structure case
typedef struct coord_case  //Puis tableau de structure case (60x40)
{
    int coord_x;        //Coordonnées x de la case
    int coord_y;        //Coordonnées y de la case
}t_coord_case;

//Structure des caractéristiques de l'attaque d'un perso
typedef struct carac_attaque_perso
{
    char attaque[20];
    int attaque_pv;
    int attaque_pa;
    int attaque_portee;
}t_carac_attaque_perso;

//Structures des attaques des différents perso
typedef struct attaques_perso
{
    t_carac_attaque_perso attaque_1;
    t_carac_attaque_perso attaque_2;
    t_carac_attaque_perso attaque_3;
    t_carac_attaque_perso attaque_4;
    t_carac_attaque_perso attaque_5;
}t_attaques_perso;

//Structure PNJ (OPTION)    On verra ça à la fin mais j'ai (Clément) des bonnes idées pour ça
typedef struct carac_PNJ
{
    int attaque_pv;
    int attaque_pa;
    int numero_case_aleatoire;
}t_struct_PNJ;

//Structure des types de personnages (4 types dispo)


typedef struct type_perso
{
    t_attaques_perso nain_1;
    t_attaques_perso sorcier_2;
    t_attaques_perso elfe_3;
    t_attaques_perso orque_4;
}t_type_perso;

//Structure joueur (toutes les données du joueur)
typedef struct joueur       //PAS FINIE je(Clément) la finirai
{
    char pseudo[SAISIE_MAX];
    //t_type_perso *perso[nbperso];     //Chaque type de personnage disponible
    t_attaques_perso attaques;
    char nomperso[20];
    int numero_perso;          //Numero pour savoir quelle classe de personnage le joueur possède (1:nain, 2:sorcier, 3:elfe, 4:orque)
    int PV_perso;       //Points de Vie
    int PA_perso;       //Points d'Attaque
    int PM_perso;       //Points de Mouvement
    int nb_tours_survecu;//Nombre de tours survécus par le joueur, permettant d'établir le classement à la fin
    int numero_case_ligne;    //numero de la ligne du tableau de cases à 2 dimensions
    int numero_case_colone;     //numero de la colonne du tableau de cases à 2 dimensions
}t_joueur;


typedef struct cases{
    enum typeCase typeDeLaCase;
    int x;
    int y;
}t_cases;

typedef struct jeuDofus {
  //t_mapJeu mapJeu;
  t_cases mapJeu[NB_LIGNES][NB_COLONNES];
  t_joueur *tabJoueur;
  int nbJoueurs;
} t_jeuDofus;





/////////////////////////////////
///PROTOTYPES SOUS-PROGRAMMES///
///////////////////////////////

//FONCTIONS INT



//FONCTIONS VOID
void MenuPrincipal();
void initialisation_allegro();
void nouvellePartie(t_jeuDofus *jeuDofus);
void sauvegarder_partie();
void charger_partie();
void regles_jeu();
void noms_createurs();
void quitter_jeu();
void InitialisationNouvellePartie();
int affichage_nouvelle_partie(BITMAP* buffer1);
void initialisationDesJoueurs(t_jeuDofus *jeuDofus);
void initialisationJoueur(BITMAP* buffer, t_joueur* joueur, int numeroDuJoueur, int messageErreur);
void initialisationPlateauDeJeu(t_jeuDofus *jeuDofus);

void choixPerso(BITMAP*buffer, t_joueur *joueur, int numeroDuJoueur, int messageErreur);
void boucleDeJeu(t_jeuDofus *jeuDofus);

BITMAP* affichagemap(t_jeuDofus *jeuDofus, int num_joueur);
char saisiepseudo(BITMAP*buffer, t_joueur *joueur, int numeroDuJoueur);

#endif // HEADER_H_INCLUDED
