                                                ////////////////////////////
                                                ///SOUS-PROGRAMMES DE JEU///
                                                ////////////////////////////
/*------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
/*------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

///////////////////
///BIBLIOTHEQUE///
/////////////////
#include "header.h"

/*------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
void affichagePersonnageEnHautADroite(t_jeuDofus *jeuDofus, BITMAP *buffer, BITMAP *nain, BITMAP *sorcier, BITMAP *orque, BITMAP *elfe, BITMAP *fleche, int numDuJoueurQuiJoue)
{
    for(int i = 0; i < jeuDofus->nbJoueurs; i++)
    {
        printf("i = %d : ",i);
        if(strcmp(jeuDofus->tabJoueur[i].nomperso, "elfe")==0)
        {
            printf("elfe : ");
            if(numDuJoueurQuiJoue==i)
                draw_sprite(buffer,fleche,785,25);
            stretch_sprite (buffer, elfe, 810, 10, 70, 65);
            rect(buffer,883,33,980,50,makecol(0,0,0));
        }
        if(strcmp(jeuDofus->tabJoueur[i].nomperso, "nain")==0)
        {
            printf("nain : ");
            if(numDuJoueurQuiJoue==i)
                draw_sprite(buffer,fleche,785,85);
            stretch_sprite (buffer, nain, 815, 70, 65, 60);
            rect(buffer,883,93,980,110,makecol(0,0,0));
        }
        if(strcmp(jeuDofus->tabJoueur[i].nomperso, "orque")==0)
        {
            printf("orque : ");
            if(numDuJoueurQuiJoue==i)
                draw_sprite(buffer,fleche,785,135);
            stretch_sprite (buffer, orque, 818, 130, 60, 55);
            rect(buffer,883,153,980,170,makecol(0,0,0));
        }
        if(strcmp(jeuDofus->tabJoueur[i].nomperso, "sorcier")==0)
        {
            printf("sorcier : ");
            if(numDuJoueurQuiJoue==i)
                draw_sprite(buffer,fleche,784,195);
            stretch_sprite (buffer, sorcier, 815, 190, 65, 60);
            rect(buffer,883,213,980,230,makecol(0,0,0));
        }
        printf("nb joueur : %d\n",jeuDofus->nbJoueurs);
    }
}

void affichageJoueurQuiJoue(t_jeuDofus *jeuDofus, BITMAP *buffer, t_joueur joueur, BITMAP *personnage)
{

    line(buffer, 388, 555, 686, 555, makecol(255,255,255));
    line(buffer, 388, 528, 388, 599, makecol(255,255,255));
    line(buffer, 448, 555, 448, 599, makecol(255,255,255));
    line(buffer, 508, 555, 508, 599, makecol(255,255,255));
    line(buffer, 568, 555, 568, 599, makecol(255,255,255));
    line(buffer, 628, 555, 628, 599, makecol(255,255,255));

    textprintf_ex(buffer,font,397,537,makecol(255,255,255), -1,"PV : %d",joueur.PV_perso);
    textprintf_ex(buffer,font,497,537,makecol(255,255,255), -1,"PM : %d",joueur.PM_perso);
    textprintf_ex(buffer,font,597,537,makecol(255,255,255), -1,"PA : %d",joueur.PA_perso);
    printf("On affiche les attaques : \n");

    stretch_sprite (buffer, personnage, 318, 535, 60, 55);
    stretch_sprite (buffer, joueur.attaques.attaque_1.image, 395, 558, 45, 40);
    stretch_sprite (buffer, joueur.attaques.attaque_2.image, 455, 560, 45, 40);
    stretch_sprite (buffer, joueur.attaques.attaque_3.image, 515, 560, 45, 40);
    stretch_sprite (buffer, joueur.attaques.attaque_4.image, 574, 560, 45, 40);
    stretch_sprite (buffer, joueur.attaques.attaque_5.image, 635, 560, 45, 40);
    printf("attaque afficher\n");
}


//void dessineLesDiff√©rentsJoueurs(t_jeuDofus *jeuDofus, BITMAP *buffer, BITMAP *elfe, BITMAP *sorcier, BITMAP *orque, BITMAP *nain){
void dessineLesDifferentsJoueurs(t_jeuDofus *jeuDofus, BITMAP *buffer, BITMAP *elfe, BITMAP *sorcier, BITMAP *orque, BITMAP *nain)
{
    for(int i = 0; i < jeuDofus->nbJoueurs; i++)
    {
        if(strcmp(jeuDofus->tabJoueur[i].nomperso, "nain")==0)
        {
            // printf("nain : x = %d / y= %d / HAUTEUR_CASE = %d / LARGEUR_CASE = %d / calcul x =%d /calcul y = %d\n",jeuDofus->tabJoueur[i].coord_x, jeuDofus->tabJoueur[i].coord_y, HAUTEUR_CASE, LARGEUR_CASE, jeuDofus->tabJoueur[i].coord_x*HAUTEUR_CASE, jeuDofus->tabJoueur[i].coord_y*LARGEUR_CASE );
            stretch_sprite(buffer, nain,jeuDofus->tabJoueur[i].coord_y*LARGEUR_CASE, jeuDofus->tabJoueur[i].coord_x*HAUTEUR_CASE,  LARGEUR_CASE,  HAUTEUR_CASE);
        }
        else if(strcmp(jeuDofus->tabJoueur[i].nomperso, "orque")==0)
        {
            //printf("orque : x = %d / y= %d / HAUTEUR_CASE = %d / LARGEUR_CASE = %d / calcul x =%d /calcul y = %d\n",jeuDofus->tabJoueur[i].coord_x, jeuDofus->tabJoueur[i].coord_y, HAUTEUR_CASE, LARGEUR_CASE, jeuDofus->tabJoueur[i].coord_x*HAUTEUR_CASE, jeuDofus->tabJoueur[i].coord_y*LARGEUR_CASE );
            stretch_sprite(buffer, orque,  jeuDofus->tabJoueur[i].coord_y*LARGEUR_CASE, jeuDofus->tabJoueur[i].coord_x*HAUTEUR_CASE, LARGEUR_CASE, HAUTEUR_CASE);
        }
        else if(strcmp(jeuDofus->tabJoueur[i].nomperso, "sorcier")==0)
        {
            // printf("sorcier : x = %d / y= %d / HAUTEUR_CASE = %d / LARGEUR_CASE = %d / calcul x =%d /calcul y = %d\n",jeuDofus->tabJoueur[i].coord_x, jeuDofus->tabJoueur[i].coord_y, HAUTEUR_CASE, LARGEUR_CASE, jeuDofus->tabJoueur[i].coord_x*HAUTEUR_CASE, jeuDofus->tabJoueur[i].coord_y*LARGEUR_CASE );
            stretch_sprite(buffer, sorcier,  jeuDofus->tabJoueur[i].coord_y*LARGEUR_CASE, jeuDofus->tabJoueur[i].coord_x*HAUTEUR_CASE, LARGEUR_CASE, HAUTEUR_CASE);
        }
        else if(strcmp(jeuDofus->tabJoueur[i].nomperso, "elfe")==0)
        {
            // printf("elfe : x = %d / y= %d / HAUTEUR_CASE = %d / LARGEUR_CASE = %d / calcul x =%d /calcul y = %d\n",jeuDofus->tabJoueur[i].coord_x, jeuDofus->tabJoueur[i].coord_y, HAUTEUR_CASE, LARGEUR_CASE, jeuDofus->tabJoueur[i].coord_x*HAUTEUR_CASE, jeuDofus->tabJoueur[i].coord_y*LARGEUR_CASE );
            stretch_sprite(buffer, elfe,  jeuDofus->tabJoueur[i].coord_y*LARGEUR_CASE, jeuDofus->tabJoueur[i].coord_x*HAUTEUR_CASE, LARGEUR_CASE, HAUTEUR_CASE);
        }
    }
}

int gereLesAttaques(t_jeuDofus *jeuDofus, BITMAP *buffer, int *valide, int *eviteRebondSouris, int i)
{

    ///Affichage du detail des attaques

    if (mouse_x>=390 && mouse_x <=446 && mouse_y >= 557 && mouse_y <= 599)
    {
        *valide=1;
    }
    if(*valide==1)
    {

        rectfill(buffer, 726, 486, 998, 599, makecol(255,255,255));
        rect(buffer, 726, 486, 998, 599, makecol(68,29,133));
        rect(buffer, 728, 488, 996, 597, makecol(68,29,133));
        textprintf_ex(buffer,font,820,510,makecol(68,29,133), -1,"ATTAQUE %s", jeuDofus->tabJoueur[i].attaques.attaque_1.attaque);
        stretch_sprite (buffer, jeuDofus->tabJoueur[i].attaques.attaque_1.image, 740, 510, 75, 70);

        textprintf_ex(buffer,font,820,537,makecol(68,29,133), -1,"PV:%d",jeuDofus->tabJoueur[i].attaques.attaque_1.attaque_pv);
        textprintf_ex(buffer,font,870,537,makecol(68,29,133), -1,"PA:%d", jeuDofus->tabJoueur[i].attaques.attaque_1.attaque_pa);
        textprintf_ex(buffer,font,920,537,makecol(68,29,133), -1,"Portee:%d", jeuDofus->tabJoueur[i].attaques.attaque_1.attaque_portee);
        textprintf_ex(buffer,font,850,569,makecol(68,29,133), -1,"JE VALIDE");
        rect(buffer,840,560,940,585,makecol(68,29,133));
    }
    ///affichage detail epee
    if (mouse_x>=451 && mouse_x <=510 && mouse_y >= 557 && mouse_y <= 599)
    {
        *valide=2;
    }
    if(*valide==2)
    {
        rectfill(buffer, 726, 486, 998, 599, makecol(255,255,255));
        rect(buffer, 726, 486, 998, 599, makecol(68,29,133));
        rect(buffer, 728, 488, 996, 597, makecol(68,29,133));
        textprintf_ex(buffer,font,820,510,makecol(68,29,133), -1,"ATTAQUE %s",jeuDofus->tabJoueur[i].attaques.attaque_2.attaque);
        stretch_sprite (buffer, jeuDofus->tabJoueur[i].attaques.attaque_2.image, 740, 510, 75, 70);
        textprintf_ex(buffer,font,820,537,makecol(68,29,133), -1,"PV:%d",jeuDofus->tabJoueur[i].attaques.attaque_2.attaque_pv);
        textprintf_ex(buffer,font,870,537,makecol(68,29,133), -1,"PA:%d",jeuDofus->tabJoueur[i].attaques.attaque_2.attaque_pa);
        textprintf_ex(buffer,font,920,537,makecol(68,29,133), -1,"Portee:%d",jeuDofus->tabJoueur[i].attaques.attaque_2.attaque_portee);
        textprintf_ex(buffer,font,850,569,makecol(68,29,133), -1,"JE VALIDE");
        rect(buffer,840,560,940,585,makecol(68,29,133));
    }
    ///affichage detail hache
    if (mouse_x>=510 && mouse_x <=568 && mouse_y >= 557 && mouse_y <= 599)
    {
        *valide=3;
    }
    if(*valide==3)
    {
        rectfill(buffer, 726, 486, 998, 599, makecol(255,255,255));
        rect(buffer, 726, 486, 998, 599, makecol(68,29,133));
        rect(buffer, 728, 488, 996, 597, makecol(68,29,133));
        textprintf_ex(buffer,font,820,510,makecol(68,29,133), -1,"ATTAQUE %s",jeuDofus->tabJoueur[i].attaques.attaque_3.attaque);
        stretch_sprite (buffer, jeuDofus->tabJoueur[i].attaques.attaque_3.image, 740, 510, 75, 70);
        textprintf_ex(buffer,font,820,537,makecol(68,29,133), -1,"PV:%d",jeuDofus->tabJoueur[i].attaques.attaque_3.attaque_pv);
        textprintf_ex(buffer,font,870,537,makecol(68,29,133), -1,"PA:%d",jeuDofus->tabJoueur[i].attaques.attaque_3.attaque_pa);
        textprintf_ex(buffer,font,920,537,makecol(68,29,133), -1,"Portee:%d",jeuDofus->tabJoueur[i].attaques.attaque_3.attaque_portee);
        textprintf_ex(buffer,font,850,569,makecol(68,29,133), -1,"JE VALIDE");
        rect(buffer,840,560,940,585,makecol(68,29,133));
    }

    ///affichage detail javelot
    if (mouse_x>=570 && mouse_x <=629 && mouse_y >= 557 && mouse_y <= 599)
    {
        *valide=4;
    }
    if(*valide==4)
    {
        rectfill(buffer, 726, 486, 998, 599, makecol(255,255,255));
        rect(buffer, 726, 486, 998, 599, makecol(68,29,133));
        rect(buffer, 728, 488, 996, 597, makecol(68,29,133));
        textprintf_ex(buffer,font,820,510,makecol(68,29,133), -1,"ATTAQUE %s",jeuDofus->tabJoueur[i].attaques.attaque_4.attaque);
        stretch_sprite (buffer, jeuDofus->tabJoueur[i].attaques.attaque_4.image, 740, 510, 75, 70);
        textprintf_ex(buffer,font,820,537,makecol(68,29,133), -1,"PV:%d",jeuDofus->tabJoueur[i].attaques.attaque_4.attaque_pv);
        textprintf_ex(buffer,font,870,537,makecol(68,29,133), -1,"PA:%d",jeuDofus->tabJoueur[i].attaques.attaque_4.attaque_pa);
        textprintf_ex(buffer,font,920,537,makecol(68,29,133), -1,"Portee:%d",jeuDofus->tabJoueur[i].attaques.attaque_4.attaque_portee);
        textprintf_ex(buffer,font,850,569,makecol(68,29,133), -1,"JE VALIDE");
        rect(buffer,840,560,940,585,makecol(68,29,133));
    }
    ///affichage detail massue
    if (mouse_x>=632 && mouse_x <=690 && mouse_y >= 557 && mouse_y <= 599)
    {
        *valide=5;
    }
    if(*valide==5)
    {
        rectfill(buffer, 726, 486, 998, 599, makecol(255,255,255));
        rect(buffer, 726, 486, 998, 599, makecol(68,29,133));
        rect(buffer, 728, 488, 996, 597, makecol(68,29,133));
        textprintf_ex(buffer,font,820,510,makecol(68,29,133), -1,"ATTAQUE %s",jeuDofus->tabJoueur[i].attaques.attaque_5.attaque);
        stretch_sprite (buffer, jeuDofus->tabJoueur[i].attaques.attaque_5.image, 740, 510, 75, 70);
        textprintf_ex(buffer,font,820,537,makecol(68,29,133), -1,"PV:%d",jeuDofus->tabJoueur[i].attaques.attaque_5.attaque_pv);
        textprintf_ex(buffer,font,870,537,makecol(68,29,133), -1,"PA:%d",jeuDofus->tabJoueur[i].attaques.attaque_5.attaque_pa);
        textprintf_ex(buffer,font,920,537,makecol(68,29,133), -1,"Portee:%d",jeuDofus->tabJoueur[i].attaques.attaque_5.attaque_portee);
        textprintf_ex(buffer,font,850,569,makecol(68,29,133), -1,"JE VALIDE");
        rect(buffer,840,560,940,585,makecol(68,29,133));
    }


    if (mouse_x>=842 && mouse_x <=940 && mouse_y >= 562 && mouse_y <= 585)
    {
        textprintf_ex(buffer,font,850,569,makecol(0, 147, 0), -1,"JE VALIDE");
        if(mouse_b & 1 && *eviteRebondSouris==0)
        {
            *eviteRebondSouris=1;
            return *valide;
        }
    }
    return 0;
}


void gereActionAttaque()
{

}


BITMAP* recup_sprites(BITMAP*scr,int w,int h,int startx,int starty,int col,int element)
// bitmap origine
// taille de l‚Äôimage √©l√©ment d‚Äôune animation
//
// d√©but de la s√©quence voulue √† partir de la position
// x et y
// nombre de colonnes dans la bitmap origine
// num√©ro de l‚Äôimage voulue dans la s√©quence
{
    BITMAP*bmp;
    int x,y;
    bmp=create_bitmap(w,h); // cr√©ation d‚Äôune bitmap pour le sprite
    if (bmp!=NULL)
    {
        x = startx + (element%col)*w; // calcul de la position r√©elle du sprite dans la bitmap
        y = starty + (element/col)*h; // d‚Äôorigine
        blit( scr, bmp, x, y, 0, 0, w, h); //recopie du sprite voulu
    }
    return bmp; // retour de la bitmap du sprite
}



void gereSablier(int *timeSablier, int xsablier, int ysablier, BITMAP *SablierTab[15], BITMAP *buffer)
{
    BITMAP *Sablier;
    (*timeSablier)++;
    printf("%d",*timeSablier);
    if(*timeSablier >= 0)
    {
        Sablier = SablierTab[0];
    }
    if(*timeSablier >= 100)
    {
        Sablier = SablierTab[1];
    }
    if(*timeSablier >= 200)
    {
        Sablier = SablierTab[2];
    }
    if(*timeSablier >= 300)
    {
        Sablier = SablierTab[3];
    }
    if(*timeSablier >= 400)
    {
        Sablier = SablierTab[4];
    }
    if(*timeSablier >= 500)
    {
        Sablier = SablierTab[5];
    }
    if(*timeSablier >= 600)
    {
        Sablier = SablierTab[6];
    }
    if(*timeSablier >= 700)
    {
        Sablier = SablierTab[7];
    }
    if(*timeSablier >= 800)
    {
        Sablier = SablierTab[8];
    }
    if(*timeSablier >= 900)
    {
        Sablier = SablierTab[9];
    }
    if(*timeSablier >= 1000)
    {
        Sablier = SablierTab[10];
    }
    if(*timeSablier >= 1100)
    {
        Sablier = SablierTab[11];
    }
    if(*timeSablier >= 1200)
    {
        Sablier = SablierTab[12];
    }
    if(*timeSablier >= 1300)
    {
        Sablier = SablierTab[13];
    }
    if(*timeSablier >= 1400)
    {
        Sablier = SablierTab[14];
    }
    if(*timeSablier >= 1500)
    {
        *timeSablier=0;
        Sablier = SablierTab[0];
    }
    stretch_sprite(buffer, Sablier, xsablier, ysablier, 65, 72);

}

void deplacement(){


}
void boucleDeJeu(t_jeuDofus *jeuDofus)
{
    ///DECLARATIONS///
    // BITMAP servant de buffer d'affichage (double buffer)
    BITMAP *buffer, *map, *elfe, *nain, *orque, *sorcier;
    int valide=0;
    BITMAP *commencer;
    BITMAP *fleche;
    BITMAP *action;
    BITMAP *temp, *SablierTab[15];
    FONT *police;

    //Variables
    int xsablier=15, ysablier=120, timeSablier=0;
    int i=0;    //compteur pour le joueur dont c'est le tour
    int j=0, m=0;    //compteurs pouvant servir √† ce qu'on veut (notamment tirage ordre des joueurs)
    int joueur_elimine=0;   //compteur du nombre de joueur √©limin√© pour savoir quand il n'en reste qu'un (#Kohlanta)
    int fin=0;     //Variable d'etat √©gale √† 0 tant que le tour du joueur n'est pas fini
    int fin_jeu=0;      //Variable d'etat √©gale √† 0 tant que le jeu n'est pas fini
    int action_execute=0,optionMeDeplacerOn=0, optionAttaquerOn=0;
    int eviteRebondSouris = (mouse_b & 1 ? 1 : 0);
    char bufferPhrase[50];
    int choixAttaque=0;
    temp=load_bitmap("sablier.bmp", NULL);
    /// On d√©coupe le sprite
    for(j = 0; j<15; j++)
    {
        SablierTab[j] = recup_sprites(temp, 42, 42, 0, 0, 15, j);
    }

    // cr√©ation du double buffer.
    map = create_bitmap(SCREEN_W, SCREEN_H);

    // d√©calaration et initialisation de l'image.
    map =load_bitmap("mapvf.bmp",NULL);
    // on verifie que l'image a bien √©t√© charg√©e au cas o√π.
    if (!map)
    {
        allegro_message("pas pu mapvf.bmp");
        allegro_exit();
        exit(EXIT_FAILURE);
    }
    ///load des personnages
    elfe=load_bitmap("imelfe.bmp",NULL);
    nain=load_bitmap("imnain.bmp",NULL);
    orque=load_bitmap("imorc.bmp",NULL);
    sorcier=load_bitmap("imsorcier.bmp",NULL);


    fleche=load_bitmap("fleche2.bmp", NULL);
    action=load_bitmap("saisi.bmp",NULL);

    //loadbitmap ecran joueur qui commence
    commencer=load_bitmap("commencer.bmp",NULL);


    buffer=create_bitmap(SCREEN_W,SCREEN_H);
    police=load_font("police.pcx", NULL, NULL);

    i = rand()%(jeuDofus->nbJoueurs);
    printf("Joueur numero %d ! \n", i);

    ///je vais rajouter une image allegro
    while(!key[KEY_SPACE])
    {
        blit(commencer, buffer, 0, 0,(SCREEN_W-commencer->w)/2, (SCREEN_H-commencer->h)/2, map->w, commencer->h);
        textout_ex(buffer, police, "TIRAGE DU JOUEUR QUI DOIT JOUER EN PREMIER...", 120, 150, makecol(255,255,255), -1);
        sprintf(bufferPhrase, "LE PERSONNAGE %s (JOUEUR %d) COMMENCE A JOUER ! ", jeuDofus->tabJoueur[i].nomperso, i+1);
        textprintf_ex(buffer,police,90,310,makecol(255,255,255),-1,"%s",bufferPhrase);
        textout_ex(buffer, police, "APPUIER SUR [ESP] POUR CONTINUER", 215, 480, makecol(0,147,0), -1);

        ///Affichage du buffer sur l'√©cran
        blit(buffer, screen, 0, 0, 0, 0, SCREEN_W, SCREEN_H);
    }

    while(!fin)
    {
        blit(map, buffer, 0, 0,(SCREEN_W-map->w)/2, (SCREEN_H-map->h)/2, map->w, map->h);
        gereSablier(&timeSablier, xsablier, ysablier, SablierTab, buffer);
        // afficher coordonn√©es de la souris (%4d = format num√©rique largeur fixe sur 4 caract√®res)
        textprintf_ex(screen,font,60,300,makecol(255,255,255),makecol(0,0,0),"%4d %4d",mouse_x,mouse_y);
        printf("yo\n");
        affichagePersonnageEnHautADroite(jeuDofus,buffer, nain, sorcier, orque, elfe, fleche, i);
        printf("test\n");
        if(strcmp(jeuDofus->tabJoueur[i].nomperso,"sorcier")==0)
            affichageJoueurQuiJoue(jeuDofus, buffer, jeuDofus->tabJoueur[i],sorcier);
        else if(strcmp(jeuDofus->tabJoueur[i].nomperso,"nain")==0)
            affichageJoueurQuiJoue(jeuDofus, buffer, jeuDofus->tabJoueur[i], nain);
        else if(strcmp(jeuDofus->tabJoueur[i].nomperso,"elfe")==0)
            affichageJoueurQuiJoue(jeuDofus, buffer, jeuDofus->tabJoueur[i], elfe);
        else if(strcmp(jeuDofus->tabJoueur[i].nomperso,"orque")==0)
            affichageJoueurQuiJoue(jeuDofus, buffer, jeuDofus->tabJoueur[i], orque);
        dessineLesDifferentsJoueurs(jeuDofus, buffer, elfe, sorcier, orque, nain);
        printf("mgl\n");

        ///OPTION DE JEU DES PERSOS
        stretch_sprite (buffer, action, 0, 5, 190, 120);
        textprintf_ex(buffer,font,52,33,makecol(255,255,255), -1,"ME DEPLACER");
        if (mouse_x>=44 && mouse_x <=146 && mouse_y >= 27 && mouse_y <= 50 )
        {
            textprintf_ex(buffer,font,52,33,makecol(0,147,0), -1,"ME DEPLACER");
            if (mouse_b & 1 && eviteRebondSouris == 0)
            {
                eviteRebondSouris=1;
                optionMeDeplacerOn=1;
                ///appelle ss prog dreplacement
            }
        }

        textprintf_ex(buffer,font,63,62,makecol(255,255,255), -1,"ATTAQUER");
        if (mouse_x>=44 && mouse_x <=146 && mouse_y >= 56 && mouse_y <= 80 )
        {
            textprintf_ex(buffer,font,63,62,makecol(0,147,0), -1,"ATTAQUER");
            if (mouse_b & 1 && eviteRebondSouris==0)
            {
                eviteRebondSouris=1;
                optionAttaquerOn=1;
            }
        }

        textprintf_ex(buffer,font,37,94,makecol(255,255,255), -1,"PASSER MON TOUR");
        if (mouse_x>=44 && mouse_x <=146 && mouse_y >= 86 && mouse_y <= 106 )
        {
            textprintf_ex(buffer,font,37,94,makecol(0,147,0), -1,"PASSER MON TOUR");
            if (mouse_b & 1 && eviteRebondSouris==0)
            {
                eviteRebondSouris=1;
                action_execute=1;
            }
        }


        if(optionAttaquerOn==1)
        {
            choixAttaque=gereLesAttaques(jeuDofus,buffer,&valide,&eviteRebondSouris, i);
            if(choixAttaque!=0)
            {
                optionAttaquerOn=0;
                gereActionAttaque();
                action_execute=1;
            }
        }

        if(optionMeDeplacerOn==1)
        {
            deplacement();

        }

        ///Affichage du buffer sur l'√©cran
        blit(buffer, screen, 0, 0, 0, 0, SCREEN_W, SCREEN_H);

        if(!(mouse_b & 1))
            eviteRebondSouris = 0;

        if(action_execute)
        {
            action_execute=0;
            optionMeDeplacerOn=0;
            optionAttaquerOn=0;
            //changement de joueur
            i ++;
            if(i==jeuDofus->nbJoueurs)
                i=0;
        }
    }
}








//////////////////////////
///SP DE BOUCLE DE JEU///
////////////////////////
/*void boucleDeJeu(t_jeuDofus *jeuDofus){

    ///DECLARATIONS///
    // BITMAP servant de buffer d'affichage (double buffer)
    BITMAP *buffer;

    //Tableaux
    t_joueur *tablotemp[jeuDofus->nbJoueurs];
    *tablotemp = (t_joueur*)malloc(sizeof(t_joueur)*(jeuDofus->nbJoueurs));
    if(*tablotemp == NULL)
    {
        printf("Erreur dans l'allocation dynamique du tableau de joueur temp\n");
    }

    //Variables
    int i=0;    //compteur pour le joueur dont c'est le tour
    int j=0, m=0;    //compteurs pouvant servir √† ce qu'on veut (notamment tirage ordre des joueurs)
    int nombre_joueur_temp=0;   //Variable temporaire contenant le nombre de joueurs
    int random_player=0;    //Tirage al√©atoire du num√©ro du joueur qui va √™tre plac√© dans le tableau des joueurs
    int joueur_elimine=0;   //compteur du nombre de joueur √©limin√© pour savoir quand il n'en reste qu'un (#Kohlanta)
    int fin_tour=0;     //Variable √©gale √† 0 tant que le tour du joueur n'est pas fini
    int fin_jeu=0;      //Variable √©gale √† 0 tant que le jeu n'est pas fini




    ///MELANGE ORDRE JOUEURS///
    for(j=0; j<jeuDofus->nbJoueurs; j++)    //On copie le tableau de joueurs dans un tableau temporaire dans lequel on va tirer les joueurs au sort
    {
        *tablotemp[j]=jeuDofus->tabJoueur[j];
    }
    nombre_joueur_temp=jeuDofus->nbJoueurs; //la variable nombre joueur temporaire prend la valeur de la variable nombre de joueur car elle va √™tre modifi√©e dans une boucle
    for(j=0; j<jeuDofus->nbJoueurs; j++) //Boucle qui d√©file pour tirer chaque joueur au sort et le placer dans le tableau de joueurs
    {
        random_player=rand()%(nombre_joueur_temp); //Fonction random qui tire un numero de joueur
        jeuDofus->tabJoueur[j]=*tablotemp[random_player]; //On place la structure du joueur tir√© dans le tableau de joueurs (tableau d√©initif)

        for(m=random_player; m<nombre_joueur_temp-1; m++) //Boucle qui va replacer les joueurs dans le tableau temporaire en retirant celui qui vient d'√™tre tir√© et placer dans le tableau d√©finitif
        {
            *tablotemp[m]=*tablotemp[m+1]; //Replacement des joueurs dans le tableau en les rassemblant au d√©but du tableau
        }
        nombre_joueur_temp--; //Diminution de la variable de nombre de joueur temporaire pour que le tirage se fasse avec un joueur en moins
    }
    //OPTION : √©cran d'affichage de l'ordre des joueurs avec leur bitmap de perso et leur nom (en reprenant le programme de choix de perso)






    ///BOUCLE DE JEU///
    do{
        for(i=0; i<jeuDofus->nbJoueurs; i++)
        {

            ///REINITIALISATION PA ET PM DU JOUEUR - ET MISE A JOUR NOMBRE DE TOURS SURVECU
            jeuDofus->tabJoueur[i].PM_perso=3;
            jeuDofus->tabJoueur[i].PA_perso=100;
            jeuDofus->tabJoueur[i].nb_tours_survecu++;

            do{

                ///AFFICHAGE
                buffer=affichagemap(jeuDofus, i);   //Sp qui affiche la map, l'ordre des joueurs, et les donn√©es du joueur en train de jouer
                //IMPORTANT : ADAPTER AFFICHAGE POUR PERSO AVEC NUM PERSO

                ///INDICATIONS : A RAJOUTER DANS AFFICHAGE MAP
                //Dire : Veuillez cliquer sur votre perso pour se d√©placer, s√©lecionner une attaque ou mettre fin au tour
                //S'il a appuy√© sur une attaque dire : Vous pouvez attaquer, revenir en arri√®re en cliquant a nouveau sur l'attaque, ou mettre fin au tour

                ///DEPLACEMENTS
                //if(mouse & 1 && mouse_x>jeuDofus->tabJoueur[i]->)     //IMPORTANT A FAIRE AVEC TABLEAU CASES
                //-> si il appuie sur la case tabcase[jeuDofus->tabJoueur[i]->numero_case_colone][jeuDofus->tabJoueur[i]->numero_case_ligne]->coord_x
                //Et pareil avec coord_y et d√©terminer zone de la case
                sp_deplacements(jeuDofus, buffer, i);  //Sp qui propose des d√©placements et les applique, en fonction des PM du joueur en cours

                ///ATTAQUES
                //S'il appuie sur le bouton d'attaque
                sp_attaques(jeuDofus, buffer, i);   //Sp qui propose des zones d'attaque en fonctions de l'attaque s√©lectionn√©e

                ///FIN DU TOUR
                //S'il appuie sur le bouton joueur suivant
                fin_tour=1;



            }while(fin_tour!=1); // Tant que le tour du joueur en cours n'est pas fini

            ///TEST DE VIE DU JOUEUR///
            if(jeuDofus->tabJoueur[i].PV_perso<=0)
            {
                //sp de suppression du joueur, je (Cl√©ment) le ferai
                joueur_elimine++;
                if(joueur_elimine=(jeuDofus->nbJoueurs-1))
                {
                    //sp de fin de partie (classement + √©cran de fin)
                }
            }


        }//Fin boucle for (fait passer les joueurs dans l'ordre


    }while(fin_jeu!=1);     // Tant que le jeu n'est pas fini      ->OPTION : mettre une possibilit√© de faire echap pour revenir au menu

}//FIN DU SOUS-PROGRAMME DE BOUCLE DE JEU*/

/*------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/


/*BITMAP* recup_sprites(BITMAP*scr,int w,int h,int startx,int starty,int col,int element)
// bitmap origine
// taille de l‚Äôimage √©l√©ment d‚Äôune animation
//
// d√©but de la s√©quence voulue √† partir de la position
// x et y
// nombre de colonnes dans la bitmap origine
// num√©ro de l‚Äôimage voulue dans la s√©quence
{
    BITMAP*bmp;
    int x,y;
    bmp=create_bitmap(w,h); // cr√©ation d‚Äôune bitmap pour le sprite
    if (bmp!=NULL)
    {
        x = startx + (element%col)*w; // calcul de la position r√©elle du sprite dans la bitmap
        y = starty + (element/col)*h; // d‚Äôorigine
        blit( scr, bmp, x, y, 0, 0, w, h); //recopie du sprite voulu
    }
    return bmp; // retour de la bitmap du sprite
}

affichageaction()
{
    int i=0, xanimFeu=0, yanimFeu=0, timeanimFeu=0;
    int valideS1=0, valideS2=0, valideS3=0, valideS4=0, valideS5=0;
    int valideN1=0, valideN2=0, valideN3=0, valideN4=0, valideN5=0;
    int valideE1=0, valideE2=0, valideE3=0, valideE4=0, valideE5=0;
    int valideO1=0, valideO2=0, valideO3=0, valideO4=0, valideO5=0;


    //initialisation allegro mis dans un sous-programme
    initialisation_allegro();



    // BITMAP servant de buffer d'affichage (double buffer)
    BITMAP *buffer;

    // initialisation d'entree.
    BITMAP *map;

    BITMAP*perso;
    perso=load_bitmap("petitperso.bmp",NULL);

    BITMAP*elfe;
    elfe=load_bitmap("imelfe.bmp",NULL);
    BITMAP*nain;
    nain=load_bitmap("imnain.bmp",NULL);
    BITMAP*orque;
    orque=load_bitmap("imorc.bmp",NULL);
    BITMAP*sorcier;
    sorcier=load_bitmap("imsorcier.bmp",NULL);

    BITMAP*fleche;
    fleche=load_bitmap("fleche2.bmp",NULL);


    //load des bitmaps attaques du l'elfe
    BITMAP*elfeanneau;
    elfeanneau=load_bitmap("attaquesperso/elfe/anneauelfique.bmp",NULL);
    BITMAP*elfearc;
    elfearc=load_bitmap("attaquesperso/elfe/arc.bmp",NULL);
    BITMAP*elfeepee1;
    elfeepee1=load_bitmap("attaquesperso/elfe/epeeelfique.bmp",NULL);
    BITMAP*elfeepee2;
    elfeepee2=load_bitmap("attaquesperso/elfe/epee.bmp",NULL);
    BITMAP*elfelame;
    elfelame=load_bitmap("attaquesperso/elfe/lameelfique.bmp",NULL);

    //load des bitmaps attaques du nain
    BITMAP*nainbelier;
    nainbelier=load_bitmap("attaquesperso/nain/belier.bmp",NULL);
    BITMAP*nainepee;
    nainepee=load_bitmap("attaquesperso/nain/epee.bmp",NULL);
    BITMAP*nainhache;
    nainhache=load_bitmap("attaquesperso/nain/hache.bmp",NULL);
    BITMAP*nainjavelot;
    nainjavelot=load_bitmap("attaquesperso/nain/javelot.bmp",NULL);
    BITMAP*nainmassue;
    nainmassue=load_bitmap("attaquesperso/nain/massue.bmp",NULL);

    //load des bitmaps attaques de l'orque
    BITMAP*orquecoup;
    orquecoup=load_bitmap("attaquesperso/orque/couppied.bmp",NULL);
    BITMAP*orquedague;
    orquedague=load_bitmap("attaquesperso/orque/dague.bmp",NULL);
    BITMAP*orqueepee1;
    orqueepee1=load_bitmap("attaquesperso/orque/epeearwen.bmp",NULL);
    BITMAP*orqueepee2;
    orqueepee2=load_bitmap("attaquesperso/orque/epeethorin.bmp",NULL);
    BITMAP*orquelame;
    orquelame=load_bitmap("attaquesperso/orque/lame-ki-koupe.bmp",NULL);

    //load des bitmaps attaques du sorcier
    BITMAP*boulefeu;
    boulefeu=load_bitmap("attaquesperso/sorcier/boulefeu.bmp",NULL);
    BITMAP*baton;
    baton=load_bitmap("attaquesperso/sorcier/baton.bmp",NULL);
    BITMAP*poignard;
    poignard=load_bitmap("attaquesperso/sorcier/poignard.bmp",NULL);
    BITMAP*barrage;
    barrage=load_bitmap("attaquesperso/sorcier/barrage.bmp",NULL);
    BITMAP*dormor;
    dormor=load_bitmap("attaquesperso/sorcier/dormor.bmp",NULL);
    //BITMAP*animfeu
    //animfeu=load_bitmap("attaquesperso/sorcier/animboulefeu.bmp",NULL);

    BITMAP*action;
    action=load_bitmap("saisi.bmp",NULL);




    //t√©l√©chargement des polices
    FONT *police = NULL; /// Initialisation Polices
    police = load_font("police.pcx",NULL,NULL);
    if(!police)
        allegro_message("Erreur chargement police");

    // CREATION DU BUFFER D'AFFICHAGE √† la taille de l'√©cran
    buffer = create_bitmap(SCREEN_W, SCREEN_H);
    if (buffer == NULL) // on verifie que l'image a bien √©t√© charg√©e au cas o√π.
    {
        allegro_message("pb creation buffer...");
        allegro_exit();
        exit(EXIT_FAILURE);
    }
    clear_bitmap(buffer);

    // cr√©ation du double buffer.
    map = create_bitmap(SCREEN_W, SCREEN_H);

    // d√©calaration et initialisation de l'image.
    map =load_bitmap("mapvf.bmp",NULL);

    // on verifie que l'image a bien √©t√© charg√©e au cas o√π.
    if (!map)
    {
        allegro_message("pas pu mapvf.bmp");
        allegro_exit();
        exit(EXIT_FAILURE);
    }

    ///Sprite boule de feu
    BITMAP*animFeu=NULL,*animFeuTab[32];
    animFeu = load_bitmap("attaquesperso/sorcier/animboulefeu.bmp", NULL);

    if(animFeu == NULL)
    {
        allegro_message("Pas reussi boule de feu");
        allegro_exit();
        exit(EXIT_FAILURE);
    }

    /// On d√©coupe le sprite
    for(i = 0; i<32; i++)
    {
        animFeuTab[i] = recup_sprites(animFeu, 98.7, 79, 0, 0, 32, i);
    }
    animFeu = animFeuTab[0];
    xanimFeu=740;
    yanimFeu=510;

    while(!key[KEY_ESC])
    {

        blit(map, buffer, 0, 0,(SCREEN_W-map->w)/2, (SCREEN_H-map->h)/2, map->w, map->h);

        // afficher coordonn√©es de la souris (%4d = format num√©rique largeur fixe sur 4 caract√®res)
        textprintf_ex(screen,font,60,300,makecol(255,255,255),makecol(0,0,0),"%4d %4d",mouse_x,mouse_y);



        line(buffer, 388, 555, 686, 555, makecol(255,255,255));
        line(buffer, 388, 528, 388, 599, makecol(255,255,255));
        line(buffer, 448, 555, 448, 599, makecol(255,255,255));
        line(buffer, 508, 555, 508, 599, makecol(255,255,255));
        line(buffer, 568, 555, 568, 599, makecol(255,255,255));
        line(buffer, 628, 555, 628, 599, makecol(255,255,255));

        textprintf_ex(buffer,font,397,537,makecol(255,255,255), -1,"PV :");
        textprintf_ex(buffer,font,497,537,makecol(255,255,255), -1,"PM :");
        textprintf_ex(buffer,font,597,537,makecol(255,255,255), -1,"PA :");


        ///si 4 joueurs
        stretch_sprite (buffer, elfe, 810, 10, 70, 65);
        rect(buffer,883,33,980,50,makecol(0,0,0));
        stretch_sprite (buffer, nain, 815, 70, 65, 60);
        rect(buffer,883,93,980,110,makecol(0,0,0));
        stretch_sprite (buffer, orque, 818, 130, 60, 55);
        rect(buffer,883,153,980,170,makecol(0,0,0));
        stretch_sprite (buffer, sorcier, 815, 190, 65, 60);
        rect(buffer,883,213,980,230,makecol(0,0,0));


        ///OPTION DE JEU DES PERSOS
        stretch_sprite (buffer, action, 0, 5, 190, 120);
        textprintf_ex(buffer,font,52,33,makecol(255,255,255), -1,"ME DEPLACER");
        if (mouse_x>=44 && mouse_x <=146 && mouse_y >= 27 && mouse_y <= 50 )
        {
            textprintf_ex(buffer,font,52,33,makecol(0,147,0), -1,"ME DEPLACER");
            if (mouse_b & 1){

                ///appelle ss prog dreplacement
            }
        }

        textprintf_ex(buffer,font,63,62,makecol(255,255,255), -1,"ATTAQUER");
         if (mouse_x>=44 && mouse_x <=146 && mouse_y >= 56 && mouse_y <= 80 )
        {
            textprintf_ex(buffer,font,63,62,makecol(0,147,0), -1,"ATTAQUER");
            if (mouse_b & 1){

                ///le joueur choisi son attaque en bas
            }
        }

        textprintf_ex(buffer,font,37,94,makecol(255,255,255), -1,"PASSER MON TOUR");
         if (mouse_x>=44 && mouse_x <=146 && mouse_y >= 86 && mouse_y <= 106 )
        {
            textprintf_ex(buffer,font,37,94,makecol(0,147,0), -1,"PASSER MON TOUR");
            if (mouse_b & 1){

            }
        }










        //si c'est le tour du nain de jouer
        draw_sprite(buffer,fleche,785,85);
        stretch_sprite (buffer, nain, 318, 535 , 60, 55);
        stretch_sprite (buffer, nainbelier, 395, 558 , 45, 40);
        stretch_sprite (buffer, nainepee, 455, 560 , 45, 40);
        stretch_sprite (buffer, nainhache, 515, 560 , 45, 40);
        stretch_sprite (buffer, nainjavelot, 574, 560 , 45, 40);
        stretch_sprite (buffer, nainmassue, 635, 560 , 45, 40);

        ///affichage detail belier

        if (mouse_x>=390 && mouse_x <=446 && mouse_y >= 557 && mouse_y <= 599)
        {
            valideN1=1;
        }
        if(valideN1==1)
        {

            rectfill(buffer, 726, 486, 998, 599, makecol(255,255,255));
            rect(buffer, 726, 486, 998, 599, makecol(68,29,133));
            rect(buffer, 728, 488, 996, 597, makecol(68,29,133));
            textprintf_ex(buffer,font,820,510,makecol(68,29,133), -1,"ATTAQUE BELIER");
            stretch_sprite (buffer, nainbelier, 740, 510, 75, 70);

            textprintf_ex(buffer,font,820,537,makecol(68,29,133), -1,"PV:10");
            textprintf_ex(buffer,font,870,537,makecol(68,29,133), -1,"PA:5");
            textprintf_ex(buffer,font,920,537,makecol(68,29,133), -1,"Portee:1");
            textprintf_ex(buffer,font,850,569,makecol(68,29,133), -1,"JE VALIDE");
            rect(buffer,840,560,940,585,makecol(68,29,133));
            if (mouse_x>=842 && mouse_x <=940 && mouse_y >= 562 && mouse_y <= 585)
            {
                textprintf_ex(buffer,font,850,569,makecol(0, 147, 0), -1,"JE VALIDE");

                //if(mouse_b & 1 {
                ///le joueur utilise cet attaque
                //}
            }

        }
        if (mouse_x>=0 && mouse_x <=740 && mouse_y >= 0 && mouse_y <= 510 && mouse_b & 1)
        {
            valideN1=2;
        }


         ///affichage detail epee
        if (mouse_x>=451 && mouse_x <=510 && mouse_y >= 557 && mouse_y <= 599)
        {
            valideN2=1;
        }
        if(valideN2==1)
        {
            rectfill(buffer, 726, 486, 998, 599, makecol(255,255,255));
            rect(buffer, 726, 486, 998, 599, makecol(68,29,133));
            rect(buffer, 728, 488, 996, 597, makecol(68,29,133));
            textprintf_ex(buffer,font,820,510,makecol(68,29,133), -1,"ATTAQUE EPEE");
            stretch_sprite (buffer, nainepee, 740, 510, 75, 70);
            textprintf_ex(buffer,font,820,537,makecol(68,29,133), -1,"PV:20");
            textprintf_ex(buffer,font,870,537,makecol(68,29,133), -1,"PA:15");
            textprintf_ex(buffer,font,920,537,makecol(68,29,133), -1,"Portee:3");
            textprintf_ex(buffer,font,850,569,makecol(68,29,133), -1,"JE VALIDE");
            rect(buffer,840,560,940,585,makecol(68,29,133));
            if (mouse_x>=842 && mouse_x <=940 && mouse_y >= 562 && mouse_y <= 585)
            {
                textprintf_ex(buffer,font,850,569,makecol(0, 147, 0), -1,"JE VALIDE");
                //if(mouse_b & 1 {
                ///le joueur utilise cet attaque
                //}
            }
        }
        if (mouse_x>=0 && mouse_x <=740 && mouse_y >= 0 && mouse_y <= 510 && mouse_b & 1)
        {
            valideN2=2;
        }

         ///affichage detail hache
        if (mouse_x>=510 && mouse_x <=568 && mouse_y >= 557 && mouse_y <= 599)
        {
            valideN3=1;
        }
        if(valideN3==1)
        {
            rectfill(buffer, 726, 486, 998, 599, makecol(255,255,255));
            rect(buffer, 726, 486, 998, 599, makecol(68,29,133));
            rect(buffer, 728, 488, 996, 597, makecol(68,29,133));
            textprintf_ex(buffer,font,820,510,makecol(68,29,133), -1,"ATTAQUE HACHE");
            stretch_sprite (buffer, nainhache, 740, 510, 75, 70);
            textprintf_ex(buffer,font,820,537,makecol(68,29,133), -1,"PV:20");
            textprintf_ex(buffer,font,870,537,makecol(68,29,133), -1,"PA:20");
            textprintf_ex(buffer,font,920,537,makecol(68,29,133), -1,"Portee:5");
            textprintf_ex(buffer,font,850,569,makecol(68,29,133), -1,"JE VALIDE");
            rect(buffer,840,560,940,585,makecol(68,29,133));
            if (mouse_x>=842 && mouse_x <=940 && mouse_y >= 562 && mouse_y <= 585)
            {
                textprintf_ex(buffer,font,850,569,makecol(0, 147, 0), -1,"JE VALIDE");
                //if(mouse_b & 1 {
                ///le joueur utilise cet attaque
                //}
            }
        }
        if (mouse_x>=0 && mouse_x <=740 && mouse_y >= 0 && mouse_y <= 510 && mouse_b & 1)
        {
            valideN3=2;
        }

         ///affichage detail javelot
        if (mouse_x>=570 && mouse_x <=629 && mouse_y >= 557 && mouse_y <= 599)
        {
            valideN4=1;
        }
        if(valideN4==1)
        {
            rectfill(buffer, 726, 486, 998, 599, makecol(255,255,255));
            rect(buffer, 726, 486, 998, 599, makecol(68,29,133));
            rect(buffer, 728, 488, 996, 597, makecol(68,29,133));
            textprintf_ex(buffer,font,820,510,makecol(68,29,133), -1,"ATTAQUE JAVELOT");
            stretch_sprite (buffer, nainjavelot, 740, 510, 75, 70);
            textprintf_ex(buffer,font,820,537,makecol(68,29,133), -1,"PV:10");
            textprintf_ex(buffer,font,870,537,makecol(68,29,133), -1,"PA:20");
            textprintf_ex(buffer,font,920,537,makecol(68,29,133), -1,"Portee:7");
            textprintf_ex(buffer,font,850,569,makecol(68,29,133), -1,"JE VALIDE");
            rect(buffer,840,560,940,585,makecol(68,29,133));
            if (mouse_x>=842 && mouse_x <=940 && mouse_y >= 562 && mouse_y <= 585)
            {
                textprintf_ex(buffer,font,850,569,makecol(0, 147, 0), -1,"JE VALIDE");
                //if(mouse_b & 1 {
                ///le joueur utilise cet attaque
                //}
            }
        }
        if (mouse_x>=0 && mouse_x <=740 && mouse_y >= 0 && mouse_y <= 510 && mouse_b & 1)
        {
            valideN4=2;
        }


         ///affichage detail massue
        if (mouse_x>=632 && mouse_x <=690 && mouse_y >= 557 && mouse_y <= 599)
        {
            valideN5=1;
        }
        if(valideN5==1)
        {
            rectfill(buffer, 726, 486, 998, 599, makecol(255,255,255));
            rect(buffer, 726, 486, 998, 599, makecol(68,29,133));
            rect(buffer, 728, 488, 996, 597, makecol(68,29,133));
            textprintf_ex(buffer,font,820,510,makecol(68,29,133), -1,"ATTAQUE MASSUE");
            stretch_sprite (buffer, nainmassue, 740, 510, 75, 70);
            textprintf_ex(buffer,font,820,537,makecol(68,29,133), -1,"PV:15");
            textprintf_ex(buffer,font,870,537,makecol(68,29,133), -1,"PA:15");
            textprintf_ex(buffer,font,920,537,makecol(68,29,133), -1,"Portee:4");
            textprintf_ex(buffer,font,850,569,makecol(68,29,133), -1,"JE VALIDE");
            rect(buffer,840,560,940,585,makecol(68,29,133));
            if (mouse_x>=842 && mouse_x <=940 && mouse_y >= 562 && mouse_y <= 585)
            {
                textprintf_ex(buffer,font,850,569,makecol(0, 147, 0), -1,"JE VALIDE");
                //if(mouse_b & 1 {
                ///le joueur utilise cet attaque
                //}
            }
        }
        if (mouse_x>=0 && mouse_x <=740 && mouse_y >= 0 && mouse_y <= 510 && mouse_b & 1)
        {
            valideN5=2;
        }





////////////////////////////////////////////////////////////////////////////////////

        /*//si c'est le tour de l'elfe de jouer
        draw_sprite(buffer,fleche,785,25);
        stretch_sprite (buffer, elfe, 318, 535 , 60, 55);
        stretch_sprite (buffer, elfeanneau, 395, 558 , 45, 40);
        stretch_sprite (buffer, elfearc, 455, 560 , 45, 40);
        stretch_sprite (buffer, elfeepee1, 515, 560 , 45, 40);
        stretch_sprite (buffer, elfeepee2, 574, 560 , 45, 40);
        stretch_sprite (buffer, elfelame, 635, 560 , 45, 40);

         ///affichage detail anneau

        if (mouse_x>=390 && mouse_x <=446 && mouse_y >= 557 && mouse_y <= 599)
        {
            valideE1=1;
        }
        if(valideE1==1)
        {

            rectfill(buffer, 726, 486, 998, 599, makecol(255,255,255));
            rect(buffer, 726, 486, 998, 599, makecol(68,29,133));
            rect(buffer, 728, 488, 996, 597, makecol(68,29,133));
            textprintf_ex(buffer,font,820,510,makecol(68,29,133), -1,"ATTAQUE ANNEAU");
            stretch_sprite (buffer, elfeanneau, 740, 510, 75, 70);

            textprintf_ex(buffer,font,820,537,makecol(68,29,133), -1,"PV:10");
            textprintf_ex(buffer,font,870,537,makecol(68,29,133), -1,"PA:20");
            textprintf_ex(buffer,font,920,537,makecol(68,29,133), -1,"Portee:4");
            textprintf_ex(buffer,font,850,569,makecol(68,29,133), -1,"JE VALIDE");
            rect(buffer,840,560,940,585,makecol(68,29,133));
            if (mouse_x>=842 && mouse_x <=940 && mouse_y >= 562 && mouse_y <= 585)
            {
                textprintf_ex(buffer,font,850,569,makecol(0, 147, 0), -1,"JE VALIDE");

                //if(mouse_b & 1 {
                ///le joueur utilise cet attaque
                //}
            }

        }
        if (mouse_x>=0 && mouse_x <=740 && mouse_y >= 0 && mouse_y <= 510 && mouse_b & 1)
        {
            valideE1=2;
        }


         ///affichage detail arc
        if (mouse_x>=451 && mouse_x <=510 && mouse_y >= 557 && mouse_y <= 599)
        {
            valideE2=1;
        }
        if(valideE2==1)
        {
            rectfill(buffer, 726, 486, 998, 599, makecol(255,255,255));
            rect(buffer, 726, 486, 998, 599, makecol(68,29,133));
            rect(buffer, 728, 488, 996, 597, makecol(68,29,133));
            textprintf_ex(buffer,font,820,510,makecol(68,29,133), -1,"ATTAQUE ARC");
            stretch_sprite (buffer, elfearc, 740, 510, 75, 70);
            textprintf_ex(buffer,font,820,537,makecol(68,29,133), -1,"PV:10");
            textprintf_ex(buffer,font,870,537,makecol(68,29,133), -1,"PA:20");
            textprintf_ex(buffer,font,920,537,makecol(68,29,133), -1,"Portee:7");
            textprintf_ex(buffer,font,850,569,makecol(68,29,133), -1,"JE VALIDE");
            rect(buffer,840,560,940,585,makecol(68,29,133));
            if (mouse_x>=842 && mouse_x <=940 && mouse_y >= 562 && mouse_y <= 585)
            {
                textprintf_ex(buffer,font,850,569,makecol(0, 147, 0), -1,"JE VALIDE");
                //if(mouse_b & 1 {
                ///le joueur utilise cet attaque
                //}
            }
        }
        if (mouse_x>=0 && mouse_x <=740 && mouse_y >= 0 && mouse_y <= 510 && mouse_b & 1)
        {
            valideE2=2;
        }

         ///affichage detail epee elfique
        if (mouse_x>=510 && mouse_x <=568 && mouse_y >= 557 && mouse_y <= 599)
        {
            valideE3=1;
        }
        if(valideE3==1)
        {
            rectfill(buffer, 726, 486, 998, 599, makecol(255,255,255));
            rect(buffer, 726, 486, 998, 599, makecol(68,29,133));
            rect(buffer, 728, 488, 996, 597, makecol(68,29,133));
            textprintf_ex(buffer,font,820,510,makecol(68,29,133), -1,"ATTAQUE EPEE ELFIQUE");
            stretch_sprite (buffer, elfeepee1, 740, 510, 75, 70);
            textprintf_ex(buffer,font,820,537,makecol(68,29,133), -1,"PV:15");
            textprintf_ex(buffer,font,870,537,makecol(68,29,133), -1,"PA:15");
            textprintf_ex(buffer,font,920,537,makecol(68,29,133), -1,"Portee:4");
            textprintf_ex(buffer,font,850,569,makecol(68,29,133), -1,"JE VALIDE");
            rect(buffer,840,560,940,585,makecol(68,29,133));
            if (mouse_x>=842 && mouse_x <=940 && mouse_y >= 562 && mouse_y <= 585)
            {
                textprintf_ex(buffer,font,850,569,makecol(0, 147, 0), -1,"JE VALIDE");
                //if(mouse_b & 1 {
                ///le joueur utilise cet attaque
                //}
            }
        }
        if (mouse_x>=0 && mouse_x <=740 && mouse_y >= 0 && mouse_y <= 510 && mouse_b & 1)
        {
            valideE3=2;
        }

         ///affichage detail epee
        if (mouse_x>=570 && mouse_x <=629 && mouse_y >= 557 && mouse_y <= 599)
        {
            valideE4=1;
        }
        if(valideE4==1)
        {
            rectfill(buffer, 726, 486, 998, 599, makecol(255,255,255));
            rect(buffer, 726, 486, 998, 599, makecol(68,29,133));
            rect(buffer, 728, 488, 996, 597, makecol(68,29,133));
            textprintf_ex(buffer,font,820,510,makecol(68,29,133), -1,"ATTAQUE EPEE");
            stretch_sprite (buffer, elfeepee2, 740, 510, 75, 70);
            textprintf_ex(buffer,font,820,537,makecol(68,29,133), -1,"PV:20");
            textprintf_ex(buffer,font,870,537,makecol(68,29,133), -1,"PA:15");
            textprintf_ex(buffer,font,920,537,makecol(68,29,133), -1,"Portee:3");
            textprintf_ex(buffer,font,850,569,makecol(68,29,133), -1,"JE VALIDE");
            rect(buffer,840,560,940,585,makecol(68,29,133));
            if (mouse_x>=842 && mouse_x <=940 && mouse_y >= 562 && mouse_y <= 585)
            {
                textprintf_ex(buffer,font,850,569,makecol(0, 147, 0), -1,"JE VALIDE");
                //if(mouse_b & 1 {
                ///le joueur utilise cet attaque
                //}
            }
        }
        if (mouse_x>=0 && mouse_x <=740 && mouse_y >= 0 && mouse_y <= 510 && mouse_b & 1)
        {
            valideE4=2;
        }


         ///affichage detail lame
        if (mouse_x>=632 && mouse_x <=690 && mouse_y >= 557 && mouse_y <= 599)
        {
            valideE5=1;
        }
        if(valideE5==1)
        {
            rectfill(buffer, 726, 486, 998, 599, makecol(255,255,255));
            rect(buffer, 726, 486, 998, 599, makecol(68,29,133));
            rect(buffer, 728, 488, 996, 597, makecol(68,29,133));
            textprintf_ex(buffer,font,820,510,makecol(68,29,133), -1,"ATTAQUE LAME");
            stretch_sprite (buffer, elfelame, 740, 510, 75, 70);
            textprintf_ex(buffer,font,820,537,makecol(68,29,133), -1,"PV:10");
            textprintf_ex(buffer,font,870,537,makecol(68,29,133), -1,"PA:5");
            textprintf_ex(buffer,font,920,537,makecol(68,29,133), -1,"Portee:1");
            textprintf_ex(buffer,font,850,569,makecol(68,29,133), -1,"JE VALIDE");
            rect(buffer,840,560,940,585,makecol(68,29,133));
            if (mouse_x>=842 && mouse_x <=940 && mouse_y >= 562 && mouse_y <= 585)
            {
                textprintf_ex(buffer,font,850,569,makecol(0, 147, 0), -1,"JE VALIDE");
                //if(mouse_b & 1 {
                ///le joueur utilise cet attaque
                //}
            }
        }
        if (mouse_x>=0 && mouse_x <=740 && mouse_y >= 0 && mouse_y <= 510 && mouse_b & 1)
        {
            valideE5=2;
        }*/






////////////////////////////////////////////////////////////////////////////////////

       /* //si c'est le tour du sorcier de jouer
        draw_sprite(buffer,fleche,784,195);
        stretch_sprite (buffer, sorcier, 318, 535, 60, 55);
        stretch_sprite (buffer, boulefeu, 395, 558, 45, 40);
        stretch_sprite (buffer, baton, 455, 560, 45, 40);
        stretch_sprite (buffer, poignard, 515, 560, 45, 40);
        stretch_sprite (buffer, barrage, 574, 560, 45, 40);
        stretch_sprite (buffer, dormor, 635, 560, 45, 40);

        ///affichage detail boule de feu

        if (mouse_x>=390 && mouse_x <=446 && mouse_y >= 557 && mouse_y <= 599)
        {
            valideS1=1;
        }
        if(valideS1==1)
        {

            ///chargement des images du sprite
            timeanimFeu++;
            if(timeanimFeu >= 0)
            {
                animFeu = animFeuTab[0];
            }
            if(timeanimFeu >= 20)
            {
                animFeu = animFeuTab[1];
            }
            if(timeanimFeu >= 40)
            {
                animFeu = animFeuTab[2];
            }
            if(timeanimFeu >= 60)
            {
                animFeu = animFeuTab[3];
            }
            if(timeanimFeu >= 80)
            {
                animFeu = animFeuTab[4];
            }
            if(timeanimFeu >= 100)
            {
                animFeu = animFeuTab[5];
            }
            if(timeanimFeu >= 120)
            {
                animFeu = animFeuTab[6];
            }
            if(timeanimFeu >= 140)
            {
                animFeu = animFeuTab[7];
            }
            if(timeanimFeu >= 160)
            {
                animFeu = animFeuTab[8];
            }
            if(timeanimFeu >= 180)
            {
                animFeu = animFeuTab[9];
            }
            if(timeanimFeu >= 200)
            {
                animFeu = animFeuTab[10];
            }
            if(timeanimFeu >= 220)
            {
                animFeu = animFeuTab[11];
            }
            if(timeanimFeu >= 240)
            {
                animFeu = animFeuTab[12];
            }
            if(timeanimFeu >= 260)
            {
                animFeu = animFeuTab[13];
            }
            if(timeanimFeu >= 280)
            {
                animFeu = animFeuTab[14];
            }
            if(timeanimFeu >= 300)
            {
                animFeu = animFeuTab[15];
            }
            if(timeanimFeu >= 320)
            {
                animFeu = animFeuTab[16];
            }
            if(timeanimFeu >= 340)
            {
                animFeu = animFeuTab[17];
            }
            if(timeanimFeu >= 360)
            {
                animFeu = animFeuTab[18];
            }
            if(timeanimFeu >= 380)
            {
                animFeu = animFeuTab[19];
            }
            if(timeanimFeu >= 400)
            {
                animFeu = animFeuTab[20];
            }
            if(timeanimFeu >= 420)
            {
                animFeu = animFeuTab[21];
            }
            if(timeanimFeu >= 440)
            {
                animFeu = animFeuTab[22];
            }
            if(timeanimFeu >= 460)
            {
                animFeu = animFeuTab[23];
            }
            if(timeanimFeu >= 480)
            {
                animFeu = animFeuTab[24];
            }
            if(timeanimFeu >= 500)
            {
                animFeu = animFeuTab[25];
            }
            if(timeanimFeu >= 520)
            {
                animFeu = animFeuTab[26];
            }
            if(timeanimFeu >= 540)
            {
                animFeu = animFeuTab[27];
            }
            if(timeanimFeu >= 560)
            {
                animFeu = animFeuTab[28];
            }
            if(timeanimFeu >= 580)
            {
                animFeu = animFeuTab[29];
            }
            if(timeanimFeu >= 600)
            {
                animFeu = animFeuTab[30];
            }
            if(timeanimFeu >= 620)
            {
                animFeu = animFeuTab[31];
            }
            if(timeanimFeu >= 640)
            {
                timeanimFeu=0;
            }
            rectfill(buffer, 726, 486, 998, 599, makecol(255,255,255));
            rect(buffer, 726, 486, 998, 599, makecol(68,29,133));
            rect(buffer, 728, 488, 996, 597, makecol(68,29,133));
            textprintf_ex(buffer,font,820,510,makecol(68,29,133), -1,"ATTAQUE BOULE DE FEU");
            stretch_sprite(buffer, animFeu,  xanimFeu, yanimFeu, 75, 75 );
            //draw_sprite(buffer, animFeu, xanimFeu, yanimFeu);


            textprintf_ex(buffer,font,820,537,makecol(68,29,133), -1,"PV:10");
            textprintf_ex(buffer,font,870,537,makecol(68,29,133), -1,"PA:20");
            textprintf_ex(buffer,font,920,537,makecol(68,29,133), -1,"Portee:7");
            textprintf_ex(buffer,font,850,569,makecol(68,29,133), -1,"JE VALIDE");
            rect(buffer,840,560,940,585,makecol(68,29,133));
            if (mouse_x>=842 && mouse_x <=940 && mouse_y >= 562 && mouse_y <= 585)
            {
                textprintf_ex(buffer,font,850,569,makecol(0, 147, 0), -1,"JE VALIDE");

                //if(mouse_b & 1 {
                ///le joueur utilise cet attaque
                //}
            }

        }
        if (mouse_x>=0 && mouse_x <=740 && mouse_y >= 0 && mouse_y <= 510 && mouse_b & 1)
        {
            valideS1=2;
        }

        ///affichage detail baton
        if (mouse_x>=451 && mouse_x <=510 && mouse_y >= 557 && mouse_y <= 599)
        {
            valideS2=1;
        }
        if(valideS2==1)
        {
            rectfill(buffer, 726, 486, 998, 599, makecol(255,255,255));
            rect(buffer, 726, 486, 998, 599, makecol(68,29,133));
            rect(buffer, 728, 488, 996, 597, makecol(68,29,133));
            textprintf_ex(buffer,font,820,510,makecol(68,29,133), -1,"ATTAQUE BATON");
            stretch_sprite (buffer, baton, 740, 510, 75, 70);
            textprintf_ex(buffer,font,820,537,makecol(68,29,133), -1,"PV:20");
            textprintf_ex(buffer,font,870,537,makecol(68,29,133), -1,"PA:15");
            textprintf_ex(buffer,font,920,537,makecol(68,29,133), -1,"Portee:3");
            textprintf_ex(buffer,font,850,569,makecol(68,29,133), -1,"JE VALIDE");
            rect(buffer,840,560,940,585,makecol(68,29,133));
            if (mouse_x>=842 && mouse_x <=940 && mouse_y >= 562 && mouse_y <= 585)
            {
                textprintf_ex(buffer,font,850,569,makecol(0, 147, 0), -1,"JE VALIDE");
                //if(mouse_b & 1 {
                ///le joueur utilise cet attaque
                //}
            }
        }
        if (mouse_x>=0 && mouse_x <=740 && mouse_y >= 0 && mouse_y <= 510 && mouse_b & 1)
        {
            valideS2=2;
        }

        ///affichage detail poignard
        if (mouse_x>=510 && mouse_x <=568 && mouse_y >= 557 && mouse_y <= 599)
        {
            valideS3=1;
        }
        if(valideS3==1)
        {
            rectfill(buffer, 726, 486, 998, 599, makecol(255,255,255));
            rect(buffer, 726, 486, 998, 599, makecol(68,29,133));
            rect(buffer, 728, 488, 996, 597, makecol(68,29,133));
            textprintf_ex(buffer,font,820,510,makecol(68,29,133), -1,"ATTAQUE POIGNARD");
            stretch_sprite (buffer, poignard, 740, 510, 75, 70);
            textprintf_ex(buffer,font,820,537,makecol(68,29,133), -1,"PV:10");
            textprintf_ex(buffer,font,870,537,makecol(68,29,133), -1,"PA:5");
            textprintf_ex(buffer,font,920,537,makecol(68,29,133), -1,"Portee:1");
            textprintf_ex(buffer,font,850,569,makecol(68,29,133), -1,"JE VALIDE");
            rect(buffer,840,560,940,585,makecol(68,29,133));
            if (mouse_x>=842 && mouse_x <=940 && mouse_y >= 562 && mouse_y <= 585)
            {
                textprintf_ex(buffer,font,850,569,makecol(0, 147, 0), -1,"JE VALIDE");
                //if(mouse_b & 1 {
                ///le joueur utilise cet attaque
                //}
            }
        }
        if (mouse_x>=0 && mouse_x <=740 && mouse_y >= 0 && mouse_y <= 510 && mouse_b & 1)
        {
            valideS3=2;
        }

         ///affichage detail barrage
        if (mouse_x>=570 && mouse_x <=629 && mouse_y >= 557 && mouse_y <= 599)
        {
            valideS4=1;
        }
        if(valideS4==1)
        {
            rectfill(buffer, 726, 486, 998, 599, makecol(255,255,255));
            rect(buffer, 726, 486, 998, 599, makecol(68,29,133));
            rect(buffer, 728, 488, 996, 597, makecol(68,29,133));
            textprintf_ex(buffer,font,820,510,makecol(68,29,133), -1,"ATTAQUE BARRAGE");
            stretch_sprite (buffer, barrage, 740, 510, 75, 70);
            textprintf_ex(buffer,font,820,537,makecol(68,29,133), -1,"PV:15");
            textprintf_ex(buffer,font,870,537,makecol(68,29,133), -1,"PA:5");
            textprintf_ex(buffer,font,920,537,makecol(68,29,133), -1,"Portee:2");
            textprintf_ex(buffer,font,850,569,makecol(68,29,133), -1,"JE VALIDE");
            rect(buffer,840,560,940,585,makecol(68,29,133));
            if (mouse_x>=842 && mouse_x <=940 && mouse_y >= 562 && mouse_y <= 585)
            {
                textprintf_ex(buffer,font,850,569,makecol(0, 147, 0), -1,"JE VALIDE");
                //if(mouse_b & 1 {
                ///le joueur utilise cet attaque
                //}
            }
        }
        if (mouse_x>=0 && mouse_x <=740 && mouse_y >= 0 && mouse_y <= 510 && mouse_b & 1)
        {
            valideS4=2;
        }

         ///affichage detail dormor
        if (mouse_x>=632 && mouse_x <=690 && mouse_y >= 557 && mouse_y <= 599)
        {
            valideS5=1;
        }
        if(valideS5==1)
        {
            rectfill(buffer, 726, 486, 998, 599, makecol(255,255,255));
            rect(buffer, 726, 486, 998, 599, makecol(68,29,133));
            rect(buffer, 728, 488, 996, 597, makecol(68,29,133));
            textprintf_ex(buffer,font,820,510,makecol(68,29,133), -1,"ATTAQUE DORMOR");
            stretch_sprite (buffer, dormor, 740, 510, 75, 70);
            textprintf_ex(buffer,font,820,537,makecol(68,29,133), -1,"PV:15");
            textprintf_ex(buffer,font,870,537,makecol(68,29,133), -1,"PA:15");
            textprintf_ex(buffer,font,920,537,makecol(68,29,133), -1,"Portee:4");
            textprintf_ex(buffer,font,850,569,makecol(68,29,133), -1,"JE VALIDE");
            rect(buffer,840,560,940,585,makecol(68,29,133));
            if (mouse_x>=842 && mouse_x <=940 && mouse_y >= 562 && mouse_y <= 585)
            {
                textprintf_ex(buffer,font,850,569,makecol(0, 147, 0), -1,"JE VALIDE");
                //if(mouse_b & 1 {
                ///le joueur utilise cet attaque
                //}
            }
        }
        if (mouse_x>=0 && mouse_x <=740 && mouse_y >= 0 && mouse_y <= 510 && mouse_b & 1)
        {
            valideS5=2;
        }*/


//////////////////////////////////////////////////////////////////////////////////////////////////////////

       /* //si c'est le tour du Orque de jouer
        draw_sprite(buffer,fleche,785,135);
        stretch_sprite (buffer, orque, 318, 535 , 60, 55);
        stretch_sprite (buffer, orquecoup, 395, 558 , 45, 40);
        stretch_sprite (buffer, orquedague, 455, 560 , 45, 40);
        stretch_sprite (buffer, orqueepee1, 515, 560 , 45, 40);
        stretch_sprite (buffer, orqueepee2, 574, 560 , 45, 40);
        stretch_sprite (buffer, orquelame, 635, 560 , 45, 40);

        ///affichage detail coup

        if (mouse_x>=390 && mouse_x <=446 && mouse_y >= 557 && mouse_y <= 599)
        {
            valideO1=1;
        }
        if(valideO1==1)
        {

            rectfill(buffer, 726, 486, 998, 599, makecol(255,255,255));
            rect(buffer, 726, 486, 998, 599, makecol(68,29,133));
            rect(buffer, 728, 488, 996, 597, makecol(68,29,133));
            textprintf_ex(buffer,font,820,510,makecol(68,29,133), -1,"ATTAQUE COUP");
            stretch_sprite (buffer, orquecoup, 740, 510, 75, 70);

            textprintf_ex(buffer,font,820,537,makecol(68,29,133), -1,"PV:10");
            textprintf_ex(buffer,font,870,537,makecol(68,29,133), -1,"PA:5");
            textprintf_ex(buffer,font,920,537,makecol(68,29,133), -1,"Portee:1");
            textprintf_ex(buffer,font,850,569,makecol(68,29,133), -1,"JE VALIDE");
            rect(buffer,840,560,940,585,makecol(68,29,133));
            if (mouse_x>=842 && mouse_x <=940 && mouse_y >= 562 && mouse_y <= 585)
            {
                textprintf_ex(buffer,font,850,569,makecol(0, 147, 0), -1,"JE VALIDE");

                //if(mouse_b & 1 {
                ///le joueur utilise cet attaque
                //}
            }

        }
        if (mouse_x>=0 && mouse_x <=740 && mouse_y >= 0 && mouse_y <= 510 && mouse_b & 1)
        {
            valideO1=2;
        }


         ///affichage detail dague
        if (mouse_x>=451 && mouse_x <=510 && mouse_y >= 557 && mouse_y <= 599)
        {
            valideO2=1;
        }
        if(valideO2==1)
        {
            rectfill(buffer, 726, 486, 998, 599, makecol(255,255,255));
            rect(buffer, 726, 486, 998, 599, makecol(68,29,133));
            rect(buffer, 728, 488, 996, 597, makecol(68,29,133));
            textprintf_ex(buffer,font,820,510,makecol(68,29,133), -1,"ATTAQUE DAGUE");
            stretch_sprite (buffer, orquedague, 740, 510, 75, 70);
            textprintf_ex(buffer,font,820,537,makecol(68,29,133), -1,"PV:20");
            textprintf_ex(buffer,font,870,537,makecol(68,29,133), -1,"PA:15");
            textprintf_ex(buffer,font,920,537,makecol(68,29,133), -1,"Portee:3");
            textprintf_ex(buffer,font,850,569,makecol(68,29,133), -1,"JE VALIDE");
            rect(buffer,840,560,940,585,makecol(68,29,133));
            if (mouse_x>=842 && mouse_x <=940 && mouse_y >= 562 && mouse_y <= 585)
            {
                textprintf_ex(buffer,font,850,569,makecol(0, 147, 0), -1,"JE VALIDE");
                //if(mouse_b & 1 {
                ///le joueur utilise cet attaque
                //}
            }
        }
        if (mouse_x>=0 && mouse_x <=740 && mouse_y >= 0 && mouse_y <= 510 && mouse_b & 1)
        {
            valideO2=2;
        }

         ///affichage detail epee arwen
        if (mouse_x>=510 && mouse_x <=568 && mouse_y >= 557 && mouse_y <= 599)
        {
            valideO3=1;
        }
        if(valideO3==1)
        {
            rectfill(buffer, 726, 486, 998, 599, makecol(255,255,255));
            rect(buffer, 726, 486, 998, 599, makecol(68,29,133));
            rect(buffer, 728, 488, 996, 597, makecol(68,29,133));
            textprintf_ex(buffer,font,820,510,makecol(68,29,133), -1,"ATTAQUE EPEE D'ARWEN");
            stretch_sprite (buffer, orqueepee1, 740, 510, 75, 70);
            textprintf_ex(buffer,font,820,537,makecol(68,29,133), -1,"PV:10");
            textprintf_ex(buffer,font,870,537,makecol(68,29,133), -1,"PA:12");
            textprintf_ex(buffer,font,920,537,makecol(68,29,133), -1,"Portee:4");
            textprintf_ex(buffer,font,850,569,makecol(68,29,133), -1,"JE VALIDE");
            rect(buffer,840,560,940,585,makecol(68,29,133));
            if (mouse_x>=842 && mouse_x <=940 && mouse_y >= 562 && mouse_y <= 585)
            {
                textprintf_ex(buffer,font,850,569,makecol(0, 147, 0), -1,"JE VALIDE");
                //if(mouse_b & 1 {
                ///le joueur utilise cet attaque
                //}
            }
        }
        if (mouse_x>=0 && mouse_x <=740 && mouse_y >= 0 && mouse_y <= 510 && mouse_b & 1)
        {
            valideO3=2;
        }

         ///affichage detail epee thorin
        if (mouse_x>=570 && mouse_x <=629 && mouse_y >= 557 && mouse_y <= 599)
        {
            valideO4=1;
        }
        if(valideO4==1)
        {
            rectfill(buffer, 726, 486, 998, 599, makecol(255,255,255));
            rect(buffer, 726, 486, 998, 599, makecol(68,29,133));
            rect(buffer, 728, 488, 996, 597, makecol(68,29,133));
            textprintf_ex(buffer,font,820,510,makecol(68,29,133), -1,"ATTAQUE EPEE THRORIN");
            stretch_sprite (buffer, orqueepee2, 740, 510, 75, 70);
            textprintf_ex(buffer,font,820,537,makecol(68,29,133), -1,"PV:10");
            textprintf_ex(buffer,font,870,537,makecol(68,29,133), -1,"PA:20");
            textprintf_ex(buffer,font,920,537,makecol(68,29,133), -1,"Portee:7");
            textprintf_ex(buffer,font,850,569,makecol(68,29,133), -1,"JE VALIDE");
            rect(buffer,840,560,940,585,makecol(68,29,133));
            if (mouse_x>=842 && mouse_x <=940 && mouse_y >= 562 && mouse_y <= 585)
            {
                textprintf_ex(buffer,font,850,569,makecol(0, 147, 0), -1,"JE VALIDE");
                //if(mouse_b & 1 {
                ///le joueur utilise cet attaque
                //}
            }
        }
        if (mouse_x>=0 && mouse_x <=740 && mouse_y >= 0 && mouse_y <= 510 && mouse_b & 1)
        {
            valideO4=2;
        }


         ///affichage detail lame
        if (mouse_x>=632 && mouse_x <=690 && mouse_y >= 557 && mouse_y <= 599)
        {
            valideO5=1;
        }
        if(valideO5==1)
        {
            rectfill(buffer, 726, 486, 998, 599, makecol(255,255,255));
            rect(buffer, 726, 486, 998, 599, makecol(68,29,133));
            rect(buffer, 728, 488, 996, 597, makecol(68,29,133));
            textprintf_ex(buffer,font,820,510,makecol(68,29,133), -1,"ATTAQUE LAME-KI-KOUPE");
            stretch_sprite (buffer, orquelame, 740, 510, 75, 70);
            textprintf_ex(buffer,font,820,537,makecol(68,29,133), -1,"PV:15");
            textprintf_ex(buffer,font,870,537,makecol(68,29,133), -1,"PA:15");
            textprintf_ex(buffer,font,920,537,makecol(68,29,133), -1,"Portee:4");
            textprintf_ex(buffer,font,850,569,makecol(68,29,133), -1,"JE VALIDE");
            rect(buffer,840,560,940,585,makecol(68,29,133));
            if (mouse_x>=842 && mouse_x <=940 && mouse_y >= 562 && mouse_y <= 585)
            {
                textprintf_ex(buffer,font,850,569,makecol(0, 147, 0), -1,"JE VALIDE");
                //if(mouse_b & 1 {
                ///le joueur utilise cet attaque
                //}
            }
        }
        if (mouse_x>=0 && mouse_x <=740 && mouse_y >= 0 && mouse_y <= 510 && mouse_b & 1)
        {
            valideO5=2;
        }
*/

















        blit(buffer, screen, 0, 0, 0, 0, SCREEN_W, SCREEN_H);




    }
}*/
